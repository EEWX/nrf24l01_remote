#ifndef NRF24L01_H
#define NRF24L01_H

//////////////////////////////////////////////////////////////////////////////////	 
//?????????,??????,??????????
//ALIENTEK STM32F407???
//NRF24L01????	   
//????@ALIENTEK
//????:www.openedv.com
//????:2014/5/9
//??:V1.0
//????,?????
//Copyright(C) ????????????? 2014-2024
//All rights reserved									  
////////////////////////////////////////////////////////////////////////////////// 

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//NRF24L01???????
#define NRF_READ_REG    0x00  //??????,?5???????
#define NRF_WRITE_REG   0x20  //??????,?5???????
#define RD_RX_PLOAD     0x61  //?RX????,1~32??
#define WR_TX_PLOAD     0xA0  //?TX????,1~32??
#define FLUSH_TX        0xE1  //??TX FIFO???.??????
#define FLUSH_RX        0xE2  //??RX FIFO???.??????
#define REUSE_TX_PL     0xE3  //?????????,CE??,????????.
#define NOP             0xFF  //???,??????????	 
//SPI(NRF24L01)?????
#define CONFIG          0x00  //???????;bit0:1????,0????;bit1:???;bit2:CRC??;bit3:CRC??;
                              //bit4:??MAX_RT(??????????)??;bit5:??TX_DS??;bit6:??RX_DR??
#define EN_AA           0x01  //????????  bit0~5,????0~5
#define EN_RXADDR       0x02  //??????,bit0~5,????0~5
#define SETUP_AW        0x03  //??????(??????):bit1,0:00,3??;01,4??;02,5??;
#define SETUP_RETR      0x04  //??????;bit3:0,???????;bit7:4,?????? 250*x+86us
#define RF_CH           0x05  //RF??,bit6:0,??????;
#define RF_SETUP        0x06  //RF???;bit3:????(0:1Mbps,1:2Mbps);bit2:1,????;bit0:????????
#define STATUS          0x07  //?????;bit0:TX FIFO???;bit3:1,???????(??:6);bit4,???????
                              //bit5:????????;bit6:??????;
#define MAX_TX  		0x10  //??????????
#define TX_OK   		0x20  //TX??????
#define RX_OK   		0x40  //???????

#define OBSERVE_TX      0x08  //???????,bit7:4,????????;bit3:0,?????
#define CD              0x09  //???????,bit0,????;
#define RX_ADDR_P0      0x0A  //????0????,????5???,?????
#define RX_ADDR_P1      0x0B  //????1????,????5???,?????
#define RX_ADDR_P2      0x0C  //????2????,???????,???,???RX_ADDR_P1[39:8]??;
#define RX_ADDR_P3      0x0D  //????3????,???????,???,???RX_ADDR_P1[39:8]??;
#define RX_ADDR_P4      0x0E  //????4????,???????,???,???RX_ADDR_P1[39:8]??;
#define RX_ADDR_P5      0x0F  //????5????,???????,???,???RX_ADDR_P1[39:8]??;
#define TX_ADDR         0x10  //????(?????),ShockBurstTM???,RX_ADDR_P0??????
#define RX_PW_P0        0x11  //??????0??????(1~32??),???0???
#define RX_PW_P1        0x12  //??????1??????(1~32??),???0???
#define RX_PW_P2        0x13  //??????2??????(1~32??),???0???
#define RX_PW_P3        0x14  //??????3??????(1~32??),???0???
#define RX_PW_P4        0x15  //??????4??????(1~32??),???0???
#define RX_PW_P5        0x16  //??????5??????(1~32??),???0???
#define NRF_FIFO_STATUS 0x17  //FIFO?????;bit0,RX FIFO??????;bit1,RX FIFO???;bit2,3,??
                              //bit4,TX FIFO???;bit5,TX FIFO???;bit6,1,?????????.0,???;
//////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum
{
  NRF24L01_pipe0      = (uint8_t)0,  
  NRF24L01_pipe1      = (uint8_t)1,
  NRF24L01_pipe2      = (uint8_t)2,
  NRF24L01_pipe3      = (uint8_t)3,
  NRF24L01_pipe4      = (uint8_t)4,
  NRF24L01_pipe5      = (uint8_t)5,
}NRF24L01_pipe_TypeDef;

typedef enum
{
  NRF24L01_PA_Power_n18dBm      = (uint8_t)0x00,  //-18dBm
  NRF24L01_PA_Power_n12dBm      = (uint8_t)0x02,  //-12dBm
  NRF24L01_PA_Power_n6dBm      = (uint8_t)0x04,
  NRF24L01_PA_Power_0dBm      = (uint8_t)0x06,
}NRF24L01_PA_Power_TypeDef;

typedef enum
{
  NRF24L01_DataRate_1Mbps      = (uint8_t)0x00,  
  NRF24L01_DataRate_2Mbps      = (uint8_t)0x08,  
  NRF24L01_DataRate_250Kbps      = (uint8_t)0x20,
}NRF24L01_DataRate_TypeDef;

typedef enum
{
  NRF24L01_Mode_PowerDown      = (uint8_t)0x00,  
  NRF24L01_Mode_StandbyI      = (uint8_t)0x01,  
  NRF24L01_Mode_StandbyII      = (uint8_t)0x02,
  NRF24L01_Mode_TX      = (uint8_t)0x03,
  NRF24L01_Mode_RX      = (uint8_t)0x04,
}NRF24L01_Mode_TypeDef;

typedef enum
{
  NRF24L01_CRC_8      = (uint8_t)0x00,  
  NRF24L01_CRC_16      = (uint8_t)0x04,  
}NRF24L01_CRC_TypeDef;

typedef enum
{
  NRF24L01_Flag_RX_DR      = (uint8_t)0x40,  
  NRF24L01_Flag_TX_DS      = (uint8_t)0x20,  
  NRF24L01_Flag_MAX_RT      = (uint8_t)0x10,
  NRF24L01_Flag_FIFO_FULL   = (uint8_t)0x01,
}NRF24L01_Flag_TypeDef;

typedef enum
{
  NRF24L01_Status_PDN      = (uint8_t)0x00,
  NRF24L01_Status_STANDBY      = (uint8_t)0x01,
  NRF24L01_Status_TX_IDLE      = (uint8_t)0x02,
  NRF24L01_Status_TX_BUSY      = (uint8_t)0x04,  
  NRF24L01_Status_TX_ERROR     = (uint8_t)0x08,  
  NRF24L01_Status_TX_FULL      = (uint8_t)0x10,
  NRF24L01_Status_RX_IDLE      = (uint8_t)0x20,
  NRF24L01_Status_RX_BUSY      = (uint8_t)0x40,
}NRF24L01_Status_TypeDef;

//24L01??????????
#define TX_ADR_WIDTH    5   	//5???????
#define RX_ADR_WIDTH    5   	//5???????
#define TX_PLOAD_WIDTH  16  		//5?????????
#define RX_PLOAD_WIDTH  16  		//5?????????
									   	   
#define NRF24L01_CE_PIN      GPIO_Pin_3
#define NRF24L01_CE_PORT     GPIOB

#define NRF24L01_nCS_PIN      GPIO_Pin_4
#define NRF24L01_nCS_PORT     GPIOB

#define NRF24L01_IRQ_PIN      GPIO_Pin_2
#define NRF24L01_IRQ_PORT     GPIOB

#define NRF24L01_SCK_PIN      GPIO_Pin_5
#define NRF24L01_SCK_PORT     GPIOB

#define NRF24L01_MISO_PIN      GPIO_Pin_7
#define NRF24L01_MISO_PORT     GPIOB

#define NRF24L01_MOSI_PIN      GPIO_Pin_6
#define NRF24L01_MOSI_PORT     GPIOB

#define NRF24L01_ReadIRQ() GPIO_ReadInputDataBit(NRF24L01_IRQ_PORT,NRF24L01_IRQ_PIN)

/** øÿ÷∆“˝Ω≈…Ë÷√ */
#define NRF24L01_NCS_SET()	GPIO_SetBits(NRF24L01_nCS_PORT,NRF24L01_nCS_PIN)
#define NRF24L01_CE_SET()	GPIO_SetBits(NRF24L01_CE_PORT,NRF24L01_CE_PIN)

#define NRF24L01_NCS_RESET()	GPIO_ResetBits(NRF24L01_nCS_PORT,NRF24L01_nCS_PIN)
#define NRF24L01_CE_RESET()	GPIO_ResetBits(NRF24L01_CE_PORT,NRF24L01_CE_PIN)

extern uint8_t nrf_tx_pipe[6][TX_PLOAD_WIDTH];
extern uint8_t nrf_rx_pipe[6][RX_PLOAD_WIDTH];

void NRF24L01_Init(void);//???
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t u8s);//????
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t u8s);//????		  
uint8_t NRF24L01_Read_Reg(uint8_t reg);			//????
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value);//????
uint8_t NRF24L01_Check(void);//??24L01????
uint8_t NRF24L01_TxPacket(uint8_t *txbuf);//????????
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf);//????????

void NRF24L01_ModeManage(NRF24L01_Mode_TypeDef rf_mode);
void NRF24L01_RF_Config(uint8_t rf_channel,NRF24L01_PA_Power_TypeDef pa_power,NRF24L01_DataRate_TypeDef rf_data_rate,FunctionalState RF_cont_state);
void NRF24L01_DataPipeConfig(NRF24L01_pipe_TypeDef pipe,uint8_t *pipe_rx_address,uint8_t pipe_rx_adr_width,uint8_t pipe_rx_bytes,FunctionalState AutoACK_NewState,FunctionalState PipeNewState);
void NRF24L01_SetTX_Address(uint8_t *tx_address,uint8_t tx_adr_width);
void NRF24L01_CRC_Config(NRF24L01_CRC_TypeDef crc,FunctionalState crc_status);
uint8_t NRF24L01_GetPendingFlags(void);
void NRF24L01_ClearPendingFlag(NRF24L01_Flag_TypeDef rf_flag);
void NRF24L01_IRQHandler(void);
#endif

