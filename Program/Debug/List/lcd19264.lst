###############################################################################
#
# IAR C/C++ Compiler V2.20.1.176 for STM8                 23/Jun/2020  19:59:16
# Copyright 2010-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for STMicroelectronics STM8
#
#    Source file  =  E:\MyDesign\ToyRemote\MCU Unit\Program\User\lcd19264.c
#    Command line =  
#        "E:\MyDesign\ToyRemote\MCU Unit\Program\User\lcd19264.c" -e -Om
#        --no_unroll --no_inline --no_tbaa --no_cross_call --debug --code_model
#        small --data_model medium -o "E:\MyDesign\ToyRemote\MCU
#        Unit\Program\Debug\Obj" --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.3\stm8\LIB\dlstm8smn.h" -D STM8L15X_MD
#        -lCN "E:\MyDesign\ToyRemote\MCU Unit\Program\Debug\List" -I
#        "E:\MyDesign\ToyRemote\MCU
#        Unit\Program\STM8L15x_StdPeriph_Driver\inc\" -I
#        "E:\MyDesign\ToyRemote\MCU Unit\Program\AtomOS1.3\kernel\" -I
#        "E:\MyDesign\ToyRemote\MCU Unit\Program\AtomOS1.3\ports\stm8\" -I
#        "E:\MyDesign\ToyRemote\MCU Unit\Program\User\" --vregs 16
#    List file    =  
#        E:\MyDesign\ToyRemote\MCU Unit\Program\Debug\List\lcd19264.lst
#    Object file  =  
#        E:\MyDesign\ToyRemote\MCU Unit\Program\Debug\Obj\lcd19264.o
#
###############################################################################

E:\MyDesign\ToyRemote\MCU Unit\Program\User\lcd19264.c
      1          #include "stm8l15x.h"
      2          #include "lcd19264.h"
      3          #include "atomtimer.h"
      4          
      5          //------not enough RAM in STM8 to use----------------
      6          //uint8_t LCD_RAM[128][9] = {0};
      7          
      8          void LCD_Write_REG(unsigned char data);
      9          void LCD_DisplayStartAdr(unsigned char adr);
     10          void LCD_SetVolumn(unsigned char vol);
     11          void LCD_SetIndicator(unsigned char vol);
     12          void LCD_DisplayByte(uint8_t x, uint8_t y, uint8_t data);
     13          

   \                                 In section .near.rodata, align 1
     14          const uint8_t LCD_6x8ASCTable[95][6]=
   \                     LCD_6x8ASCTable:
   \   000000 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 0, 0, 250, 0, 0, 0, 0, 192, 0, 192, 0, 0, 40, 254
   \          00 00 00 00 
   \   000014 28 FE 28 00  DC8 40, 254, 40, 0, 0, 50, 94, 242, 76, 0, 0, 102, 104, 22, 102, 0, 0
   \          00 32 5E F2 
   \   000025 1C F2 B2 4C  DC8 28, 242, 178, 76, 0, 0, 0, 0, 192, 0, 0, 0, 0, 124, 130, 0, 0, 0, 0
   \          00 00 00 00 
   \   000038 82 7C 00 00  DC8 130, 124, 0, 0, 0, 56, 124, 56, 0, 0, 0, 16, 124, 16, 0, 0, 0, 0, 0
   \          00 38 7C 38 
   \   00004B 06 00 00 00  DC8 6, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 2, 0, 0, 0, 0, 2, 12, 48, 192
   \          10 10 10 10 
   \   00005F 00 00 7C 82  DC8 0, 0, 124, 130, 130, 124, 0, 0, 66, 254, 2, 0, 0, 0, 70, 138, 146
   \          82 7C 00 00 
   \   000070 62 00 00 44  DC8 98, 0, 0, 68, 146, 146, 108, 0, 0, 28, 100, 254, 4, 0, 0, 242, 146
   \          92 92 6C 00 
   \   000081 92 8C 00 00  DC8 146, 140, 0, 0, 124, 146, 146, 76, 0, 0, 192, 142, 144, 224, 0, 0
   \          7C 92 92 4C 
   \   000091 6C 92 92 6C  DC8 108, 146, 146, 108, 0, 0, 100, 146, 146, 124, 0, 0, 0, 36, 0, 0, 0
   \          00 00 64 92 
   \   0000A2 00 02 24 00  DC8 0, 2, 36, 0, 0, 0, 0, 16, 40, 68, 130, 0, 0, 40, 40, 40, 40, 0, 0
   \          00 00 00 10 
   \   0000B5 82 44 28 10  DC8 130, 68, 40, 16, 0, 0, 64, 138, 144, 96, 0, 0, 112, 142, 146, 126
   \          00 00 40 8A 
   \   0000C5 00 00 7E 88  DC8 0, 0, 126, 136, 136, 126, 0, 0, 254, 146, 146, 108, 0, 0, 124, 130
   \          88 7E 00 00 
   \   0000D5 82 44 00 00  DC8 130, 68, 0, 0, 254, 130, 130, 124, 0, 0, 254, 146, 146, 130, 0, 0
   \          FE 82 82 7C 
   \   0000E5 FE 90 90 80  DC8 254, 144, 144, 128, 0, 0, 124, 130, 146, 92, 0, 0, 254, 16, 16, 254
   \          00 00 7C 82 
   \   0000F5 00 00 82 FE  DC8 0, 0, 130, 254, 130, 0, 0, 0, 12, 2, 2, 252, 0, 0, 254, 16, 40, 198
   \          82 00 00 00 
   \   000107 00 00 FE 02  DC8 0, 0, 254, 2, 2, 2, 0, 0, 254, 96, 96, 254, 0, 0, 254, 96, 24, 254
   \          02 02 00 00 
   \   000119 00 00 FE 82  DC8 0, 0, 254, 130, 130, 254, 0, 0, 254, 144, 144, 96, 0, 0, 124, 138
   \          82 FE 00 00 
   \   000129 86 7E 00 00  DC8 134, 126, 0, 0, 254, 152, 148, 98, 0, 0, 100, 146, 146, 76, 0, 0
   \          FE 98 94 62 
   \   000139 80 FE 80 80  DC8 128, 254, 128, 128, 0, 0, 252, 2, 2, 252, 0, 0, 240, 14, 14, 240, 0
   \          00 00 FC 02 
   \   00014A 00 FE 0C 0C  DC8 0, 254, 12, 12, 254, 0, 0, 198, 56, 56, 198, 0, 192, 32, 30, 32
   \          FE 00 00 C6 
   \   00015A C0 00 00 86  DC8 192, 0, 0, 134, 154, 178, 194, 0, 0, 0, 254, 130, 0, 0, 192, 48, 12
   \          9A B2 C2 00 
   \   00016B 02 00 00 00  DC8 2, 0, 0, 0, 0, 130, 254, 0, 0, 0, 64, 128, 64, 0, 0, 0, 2, 2, 2, 2
   \          00 82 FE 00 
   \   00017F 00 00 00 C0  DC8 0, 0, 0, 192, 0, 0, 0, 0, 4, 26, 26, 30, 0, 0, 254, 18, 18, 12, 0
   \          00 00 00 00 
   \   000192 00 0C 12 12  DC8 0, 12, 18, 18, 18, 0, 0, 12, 18, 18, 254, 0, 0, 12, 26, 26, 8, 0, 0
   \          12 00 00 0C 
   \   0001A5 10 3E 50 10  DC8 16, 62, 80, 16, 0, 0, 8, 21, 21, 30, 0, 0, 254, 16, 30, 0, 0, 0, 0
   \          00 00 08 15 
   \   0001B8 2E 00 00 00  DC8 46, 0, 0, 0, 0, 1, 1, 46, 0, 0, 0, 254, 8, 20, 18, 0, 0, 2, 254, 2
   \          00 01 01 2E 
   \   0001CC 00 00 00 1E  DC8 0, 0, 0, 30, 16, 30, 30, 0, 0, 30, 16, 16, 14, 0, 0, 12, 18, 18, 12
   \          10 1E 1E 00 
   \   0001DF 00 00 1F 12  DC8 0, 0, 31, 18, 18, 12, 0, 0, 12, 18, 18, 31, 0, 0, 30, 8, 16, 16, 0
   \          12 0C 00 00 
   \   0001F2 00 0A 1A 16  DC8 0, 10, 26, 22, 20, 0, 0, 16, 62, 18, 0, 0, 0, 28, 2, 2, 30, 0, 0
   \          14 00 00 10 
   \   000205 18 06 06 18  DC8 24, 6, 6, 24, 0, 24, 6, 28, 6, 24, 0, 0, 18, 12, 12, 18, 0, 0, 24
   \          00 18 06 1C 
   \   000218 05 05 1E 00  DC8 5, 5, 30, 0, 0, 18, 22, 26, 18, 0, 0, 16, 238, 130, 0, 0, 0, 0, 254
   \          00 12 16 1A 
   \   00022B 00 00 00 00  DC8 0, 0, 0, 0, 130, 238, 16, 0, 0, 0, 64, 128, 64, 128, 0
   \          82 EE 10 00 
     15          {
     16          //	  (0) !(1) "(2) #(3) $(4) %(5) &(6) '(7) ((8) )(9) *(10) +(11) ,(12) -(13) .(14) /(15)
     17          // 0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23) 8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
     18          // @(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39) H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
     19          // P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55) X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
     20          // `(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71) h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
     21          // p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87) x(88) y(89) z(90) {(91) |(92) }(93) ~(94)
     22          
     23          {0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
     24          {0x00,0x00,0xFA,0x00,0x00,0x00},/*"!",1*/
     25          {0x00,0xC0,0x00,0xC0,0x00,0x00},/*""",2*/
     26          {0x28,0xFE,0x28,0xFE,0x28,0x00},/*"#",3*/
     27          {0x00,0x32,0x5E,0xF2,0x4C,0x00},/*"$",4*/
     28          {0x00,0x66,0x68,0x16,0x66,0x00},/*"%",5*/
     29          {0x00,0x1C,0xF2,0xB2,0x4C,0x00},/*"&",6*/
     30          {0x00,0x00,0x00,0xC0,0x00,0x00},/*"'",7*/
     31          {0x00,0x00,0x7C,0x82,0x00,0x00},/*"(",8*/
     32          {0x00,0x00,0x82,0x7C,0x00,0x00},/*")",9*/
     33          {0x00,0x38,0x7C,0x38,0x00,0x00},/*"*",10*/
     34          {0x00,0x10,0x7C,0x10,0x00,0x00},/*"+",11*/
     35          {0x00,0x00,0x00,0x06,0x00,0x00},/*",",12*/
     36          {0x00,0x10,0x10,0x10,0x10,0x00},/*"-",13*/
     37          {0x00,0x00,0x02,0x00,0x00,0x00},/*".",14*/
     38          {0x00,0x02,0x0C,0x30,0xC0,0x00},/*"/",15*/
     39          {0x00,0x7C,0x82,0x82,0x7C,0x00},/*"0",16*/
     40          {0x00,0x42,0xFE,0x02,0x00,0x00},/*"1",17*/
     41          {0x00,0x46,0x8A,0x92,0x62,0x00},/*"2",18*/
     42          {0x00,0x44,0x92,0x92,0x6C,0x00},/*"3",19*/
     43          {0x00,0x1C,0x64,0xFE,0x04,0x00},/*"4",20*/
     44          {0x00,0xF2,0x92,0x92,0x8C,0x00},/*"5",21*/
     45          {0x00,0x7C,0x92,0x92,0x4C,0x00},/*"6",22*/
     46          {0x00,0xC0,0x8E,0x90,0xE0,0x00},/*"7",23*/
     47          {0x00,0x6C,0x92,0x92,0x6C,0x00},/*"8",24*/
     48          {0x00,0x64,0x92,0x92,0x7C,0x00},/*"9",25*/
     49          {0x00,0x00,0x24,0x00,0x00,0x00},/*":",26*/
     50          {0x00,0x02,0x24,0x00,0x00,0x00},/*";",27*/
     51          {0x00,0x10,0x28,0x44,0x82,0x00},/*"<",28*/
     52          {0x00,0x28,0x28,0x28,0x28,0x00},/*"=",29*/
     53          {0x00,0x82,0x44,0x28,0x10,0x00},/*">",30*/
     54          {0x00,0x40,0x8A,0x90,0x60,0x00},/*"?",31*/
     55          {0x00,0x70,0x8E,0x92,0x7E,0x00},/*"@",32*/
     56          {0x00,0x7E,0x88,0x88,0x7E,0x00},/*"A",33*/
     57          {0x00,0xFE,0x92,0x92,0x6C,0x00},/*"B",34*/
     58          {0x00,0x7C,0x82,0x82,0x44,0x00},/*"C",35*/
     59          {0x00,0xFE,0x82,0x82,0x7C,0x00},/*"D",36*/
     60          {0x00,0xFE,0x92,0x92,0x82,0x00},/*"E",37*/
     61          {0x00,0xFE,0x90,0x90,0x80,0x00},/*"F",38*/
     62          {0x00,0x7C,0x82,0x92,0x5C,0x00},/*"G",39*/
     63          {0x00,0xFE,0x10,0x10,0xFE,0x00},/*"H",40*/
     64          {0x00,0x82,0xFE,0x82,0x00,0x00},/*"I",41*/
     65          {0x00,0x0C,0x02,0x02,0xFC,0x00},/*"J",42*/
     66          {0x00,0xFE,0x10,0x28,0xC6,0x00},/*"K",43*/
     67          {0x00,0xFE,0x02,0x02,0x02,0x00},/*"L",44*/
     68          {0x00,0xFE,0x60,0x60,0xFE,0x00},/*"M",45*/
     69          {0x00,0xFE,0x60,0x18,0xFE,0x00},/*"N",46*/
     70          {0x00,0xFE,0x82,0x82,0xFE,0x00},/*"O",47*/
     71          {0x00,0xFE,0x90,0x90,0x60,0x00},/*"P",48*/
     72          {0x00,0x7C,0x8A,0x86,0x7E,0x00},/*"Q",49*/
     73          {0x00,0xFE,0x98,0x94,0x62,0x00},/*"R",50*/
     74          {0x00,0x64,0x92,0x92,0x4C,0x00},/*"S",51*/
     75          {0x00,0x80,0xFE,0x80,0x80,0x00},/*"T",52*/
     76          {0x00,0xFC,0x02,0x02,0xFC,0x00},/*"U",53*/
     77          {0x00,0xF0,0x0E,0x0E,0xF0,0x00},/*"V",54*/
     78          {0x00,0xFE,0x0C,0x0C,0xFE,0x00},/*"W",55*/
     79          {0x00,0xC6,0x38,0x38,0xC6,0x00},/*"X",56*/
     80          {0xC0,0x20,0x1E,0x20,0xC0,0x00},/*"Y",57*/
     81          {0x00,0x86,0x9A,0xB2,0xC2,0x00},/*"Z",58*/
     82          {0x00,0x00,0xFE,0x82,0x00,0x00},/*"[",59*/
     83          {0xC0,0x30,0x0C,0x02,0x00,0x00},/*"\",60*/
     84          {0x00,0x00,0x82,0xFE,0x00,0x00},/*"]",61*/
     85          {0x00,0x40,0x80,0x40,0x00,0x00},/*"^",62*/
     86          {0x00,0x02,0x02,0x02,0x02,0x00},/*"_",63*/
     87          {0x00,0x00,0xC0,0x00,0x00,0x00},/*"`",64*/
     88          {0x00,0x04,0x1A,0x1A,0x1E,0x00},/*"a",65*/
     89          {0x00,0xFE,0x12,0x12,0x0C,0x00},/*"b",66*/
     90          {0x00,0x0C,0x12,0x12,0x12,0x00},/*"c",67*/
     91          {0x00,0x0C,0x12,0x12,0xFE,0x00},/*"d",68*/
     92          {0x00,0x0C,0x1A,0x1A,0x08,0x00},/*"e",69*/
     93          {0x00,0x10,0x3E,0x50,0x10,0x00},/*"f",70*/
     94          {0x00,0x08,0x15,0x15,0x1E,0x00},/*"g",71*/
     95          {0x00,0xFE,0x10,0x1E,0x00,0x00},/*"h",72*/
     96          {0x00,0x00,0x2E,0x00,0x00,0x00},/*"i",73*/
     97          {0x00,0x01,0x01,0x2E,0x00,0x00},/*"j",74*/
     98          {0x00,0xFE,0x08,0x14,0x12,0x00},/*"k",75*/
     99          {0x00,0x02,0xFE,0x02,0x00,0x00},/*"l",76*/
    100          {0x00,0x1E,0x10,0x1E,0x1E,0x00},/*"m",77*/
    101          {0x00,0x1E,0x10,0x10,0x0E,0x00},/*"n",78*/
    102          {0x00,0x0C,0x12,0x12,0x0C,0x00},/*"o",79*/
    103          {0x00,0x1F,0x12,0x12,0x0C,0x00},/*"p",80*/
    104          {0x00,0x0C,0x12,0x12,0x1F,0x00},/*"q",81*/
    105          {0x00,0x1E,0x08,0x10,0x10,0x00},/*"r",82*/
    106          {0x00,0x0A,0x1A,0x16,0x14,0x00},/*"s",83*/
    107          {0x00,0x10,0x3E,0x12,0x00,0x00},/*"t",84*/
    108          {0x00,0x1C,0x02,0x02,0x1E,0x00},/*"u",85*/
    109          {0x00,0x18,0x06,0x06,0x18,0x00},/*"v",86*/
    110          {0x18,0x06,0x1C,0x06,0x18,0x00},/*"w",87*/
    111          {0x00,0x12,0x0C,0x0C,0x12,0x00},/*"x",88*/
    112          {0x00,0x18,0x05,0x05,0x1E,0x00},/*"y",89*/
    113          {0x00,0x12,0x16,0x1A,0x12,0x00},/*"z",90*/
    114          {0x00,0x10,0xEE,0x82,0x00,0x00},/*"{",91*/
    115          {0x00,0x00,0xFE,0x00,0x00,0x00},/*"|",92*/
    116          {0x00,0x82,0xEE,0x10,0x00,0x00},/*"}",93*/
    117          {0x00,0x40,0x80,0x40,0x80,0x00},/*"~",94*/
    118          };
    119          
    120          

   \                                 In section .near.rodata, align 1
    121          const uint8_t LCD_8x16ASCTable[95][16]=
   \                     LCD_8x16ASCTable:
   \   000000 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 31, 31
   \          00 00 00 00 
   \   000015 0E 00 00 00  DC8 14, 0, 0, 0, 0, 0, 176, 176, 0, 0, 0, 0, 28, 28, 0, 0, 28, 28, 0, 0
   \          00 00 B0 B0 
   \   000029 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 0, 0, 4, 31, 31, 4, 31, 31, 4, 0, 64, 240, 240
   \          00 00 00 00 
   \   00003C 40 F0 F0 40  DC8 64, 240, 240, 64, 0, 12, 30, 115, 113, 24, 8, 0, 0, 32, 48, 28, 156
   \          00 0C 1E 73 
   \   00004D F0 60 00 18  DC8 240, 96, 0, 24, 60, 36, 61, 27, 6, 12, 0, 0, 96, 192, 176, 120, 72
   \          3C 24 3D 1B 
   \   00005E 78 30 00 0D  DC8 120, 48, 0, 13, 31, 18, 30, 12, 0, 0, 0, 224, 240, 16, 144, 224
   \          1F 12 1E 0C 
   \   00006E F0 90 00 00  DC8 240, 144, 0, 0, 0, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3
   \          00 1C 1C 00 
   \   000083 0F 1C 10 00  DC8 15, 28, 16, 0, 0, 0, 0, 224, 248, 28, 4, 0, 0, 0, 0, 16, 28, 15, 3
   \          00 00 00 E0 
   \   000096 00 00 00 00  DC8 0, 0, 0, 0, 4, 28, 248, 224, 0, 0, 0, 1, 5, 7, 3, 7, 5, 1, 0, 0, 64
   \          04 1C F8 E0 
   \   0000AB C0 80 C0 40  DC8 192, 128, 192, 64, 0, 0, 1, 1, 7, 7, 1, 1, 0, 0, 0, 0, 192, 192, 0
   \          00 00 01 01 
   \   0000BE 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 52, 60, 56, 0, 0, 0, 1, 1, 1
   \          00 00 00 00 
   \   0000D4 01 01 01 00  DC8 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \          00 00 00 00 
   \   0000EB 30 30 30 00  DC8 48, 48, 48, 0, 0, 0, 0, 0, 1, 7, 30, 24, 0, 0, 24, 120, 224, 128, 0
   \          00 00 00 00 
   \   0000FE 00 00 00 00  DC8 0, 0, 0, 0, 15, 31, 16, 22, 31, 15, 0, 0, 224, 240, 208, 16, 240
   \          0F 1F 10 16 
   \   00010F E0 00 04 04  DC8 224, 0, 4, 4, 12, 31, 31, 0, 0, 0, 0, 0, 0, 240, 240, 0, 0, 0, 12
   \          0C 1F 1F 00 
   \   000122 1C 10 11 1F  DC8 28, 16, 17, 31, 14, 0, 0, 48, 112, 208, 144, 16, 16, 0, 0, 12, 28
   \          0E 00 00 30 
   \   000133 11 11 1F 0E  DC8 17, 17, 31, 14, 0, 0, 96, 112, 16, 16, 240, 224, 0, 0, 0, 31, 31, 0
   \          00 00 60 70 
   \   000145 07 07 00 00  DC8 7, 7, 0, 0, 192, 192, 64, 64, 240, 240, 64, 0, 31, 31, 17, 17, 17
   \          C0 C0 40 40 
   \   000156 10 00 00 10  DC8 16, 0, 0, 16, 16, 16, 48, 224, 192, 0, 0, 3, 7, 30, 26, 19, 1, 0, 0
   \          10 10 30 E0 
   \   000169 E0 F0 10 10  DC8 224, 240, 16, 16, 240, 224, 0, 0, 16, 16, 17, 23, 30, 24, 0, 0, 0
   \          F0 E0 00 00 
   \   00017A 70 F0 80 00  DC8 112, 240, 128, 0, 0, 0, 0, 14, 31, 19, 17, 31, 14, 0, 0, 224, 240
   \          00 00 00 0E 
   \   00018B 10 90 F0 E0  DC8 16, 144, 240, 224, 0, 0, 15, 31, 16, 16, 31, 15, 0, 0, 0, 144, 176
   \          00 00 0F 1F 
   \   00019C F0 C0 80 00  DC8 240, 192, 128, 0, 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 48, 48, 48, 0, 0
   \          00 00 00 06 
   \   0001B0 00 00 00 06  DC8 0, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 52, 60, 56, 0, 0, 0, 1, 3, 6, 12
   \          06 06 00 00 
   \   0001C5 18 10 00 00  DC8 24, 16, 0, 0, 0, 128, 192, 96, 48, 16, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0
   \          00 80 C0 60 
   \   0001D9 80 80 80 80  DC8 128, 128, 128, 128, 128, 128, 0, 0, 16, 24, 12, 6, 3, 1, 0, 0, 16
   \          80 80 00 00 
   \   0001EA 30 60 C0 80  DC8 48, 96, 192, 128, 0, 0, 0, 12, 28, 17, 19, 30, 12, 0, 0, 0, 0, 176
   \          00 00 00 0C 
   \   0001FC B0 00 00 00  DC8 176, 0, 0, 0, 15, 31, 16, 17, 19, 18, 31, 15, 224, 240, 16, 144
   \          0F 1F 10 11 
   \   00020C D0 50 D0 D0  DC8 208, 80, 208, 208, 0, 7, 15, 24, 24, 15, 7, 0, 0, 240, 240, 128
   \          00 07 0F 18 
   \   00021C 80 F0 F0 00  DC8 128, 240, 240, 0, 0, 31, 31, 17, 17, 31, 14, 0, 0, 240, 240, 16, 16
   \          00 1F 1F 11 
   \   00022D F0 E0 00 00  DC8 240, 224, 0, 0, 15, 31, 16, 16, 28, 12, 0, 0, 224, 240, 16, 16, 112
   \          0F 1F 10 10 
   \   00023E 60 00 00 1F  DC8 96, 0, 0, 31, 31, 16, 24, 15, 7, 0, 0, 240, 240, 16, 48, 224, 192
   \          1F 10 18 0F 
   \   00024F 00 00 1F 1F  DC8 0, 0, 31, 31, 17, 17, 17, 16, 0, 0, 240, 240, 16, 16, 16, 16, 0, 0
   \          11 11 11 10 
   \   000261 1F 1F 11 11  DC8 31, 31, 17, 17, 17, 16, 0, 0, 240, 240, 0, 0, 0, 0, 0, 0, 15, 31
   \          11 10 00 00 
   \   000273 10 10 1C 0C  DC8 16, 16, 28, 12, 0, 0, 224, 240, 16, 144, 240, 240, 0, 0, 31, 31, 1
   \          00 00 E0 F0 
   \   000284 01 1F 1F 00  DC8 1, 31, 31, 0, 0, 240, 240, 0, 0, 240, 240, 0, 0, 0, 16, 31, 31, 16
   \          00 F0 F0 00 
   \   000296 00 00 00 00  DC8 0, 0, 0, 0, 16, 240, 240, 16, 0, 0, 0, 0, 0, 0, 0, 31, 31, 0, 0, 96
   \          10 F0 F0 10 
   \   0002AA 70 10 10 F0  DC8 112, 16, 16, 240, 224, 0, 0, 31, 31, 1, 7, 30, 24, 0, 0, 240, 240
   \          E0 00 00 1F 
   \   0002BB 00 C0 F0 30  DC8 0, 192, 240, 48, 0, 0, 31, 31, 0, 0, 0, 0, 0, 0, 240, 240, 16, 16
   \          00 00 1F 1F 
   \   0002CD 10 10 00 00  DC8 16, 16, 0, 0, 31, 31, 4, 3, 4, 31, 31, 0, 240, 240, 0, 128, 0, 240
   \          1F 1F 04 03 
   \   0002DF F0 00 1F 1F  DC8 240, 0, 31, 31, 6, 3, 1, 31, 31, 0, 240, 240, 0, 0, 128, 240, 240
   \          06 03 01 1F 
   \   0002F0 00 0F 1F 10  DC8 0, 15, 31, 16, 16, 31, 15, 0, 0, 224, 240, 16, 16, 240, 224, 0, 0
   \          10 1F 0F 00 
   \   000301 1F 1F 11 11  DC8 31, 31, 17, 17, 31, 14, 0, 0, 240, 240, 0, 0, 0, 0, 0, 0, 15, 31
   \          1F 0E 00 00 
   \   000313 10 10 1F 0F  DC8 16, 16, 31, 15, 0, 0, 224, 240, 16, 24, 252, 228, 0, 0, 31, 31, 17
   \          00 00 E0 F0 
   \   000324 11 1F 0E 00  DC8 17, 31, 14, 0, 0, 240, 240, 0, 128, 240, 112, 0, 0, 12, 30, 19, 17
   \          00 F0 F0 00 
   \   000335 18 08 00 00  DC8 24, 8, 0, 0, 32, 48, 16, 144, 240, 96, 0, 0, 16, 16, 31, 31, 16, 16
   \          20 30 10 90 
   \   000347 00 00 00 00  DC8 0, 0, 0, 0, 240, 240, 0, 0, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 224
   \          F0 F0 00 00 
   \   00035A F0 10 10 F0  DC8 240, 16, 16, 240, 224, 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 192, 224
   \          E0 00 00 1F 
   \   00036B 30 30 E0 C0  DC8 48, 48, 224, 192, 0, 0, 31, 31, 0, 3, 0, 31, 31, 0, 128, 240, 112
   \          00 00 1F 1F 
   \   00037C 80 70 F0 80  DC8 128, 112, 240, 128, 0, 24, 28, 7, 3, 28, 24, 0, 0, 112, 240, 0, 128
   \          00 18 1C 07 
   \   00038D F0 70 00 00  DC8 240, 112, 0, 0, 30, 31, 1, 1, 31, 30, 0, 0, 0, 0, 240, 240, 0, 0, 0
   \          1E 1F 01 01 
   \   0003A0 00 10 10 11  DC8 0, 16, 16, 17, 19, 30, 28, 0, 0, 112, 240, 144, 16, 16, 16, 0, 0, 0
   \          13 1E 1C 00 
   \   0003B2 1F 1F 10 10  DC8 31, 31, 16, 16, 0, 0, 0, 0, 254, 254, 2, 2, 0, 0, 0, 24, 30, 7, 1
   \          00 00 00 00 
   \   0003C5 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 128, 224, 120, 24, 0, 0, 0, 16, 16, 31, 31, 0, 0
   \          00 00 80 E0 
   \   0003D8 00 00 02 02  DC8 0, 0, 2, 2, 254, 254, 0, 0, 0, 16, 48, 96, 96, 48, 16, 0, 0, 0, 0
   \          FE FE 00 00 
   \   0003EB 00 00 00 00  DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0
   \          00 00 00 00 
   \   000402 40 60 70 10  DC8 64, 96, 112, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 7, 3
   \          00 00 00 00 
   \   000417 00 00 60 F0  DC8 0, 0, 96, 240, 144, 144, 240, 240, 0, 0, 31, 31, 4, 4, 7, 3, 0, 0
   \          90 90 F0 F0 
   \   000429 F0 F0 10 10  DC8 240, 240, 16, 16, 240, 224, 0, 0, 3, 7, 4, 4, 6, 2, 0, 0, 224, 240
   \          F0 E0 00 00 
   \   00043B 10 10 30 20  DC8 16, 16, 48, 32, 0, 0, 3, 7, 4, 4, 31, 31, 0, 0, 224, 240, 16, 16
   \          00 00 03 07 
   \   00044D F0 F0 00 00  DC8 240, 240, 0, 0, 3, 7, 4, 4, 7, 3, 0, 0, 224, 240, 144, 144, 144
   \          03 07 04 04 
   \   00045E 80 00 00 01  DC8 128, 0, 0, 1, 15, 31, 17, 17, 17, 0, 0, 0, 240, 240, 0, 0, 0, 0, 0
   \          0F 1F 11 11 
   \   000471 03 07 04 04  DC8 3, 7, 4, 4, 7, 7, 0, 0, 226, 242, 18, 18, 254, 252, 0, 0, 31, 31, 4
   \          07 07 00 00 
   \   000484 04 07 03 00  DC8 4, 7, 3, 0, 0, 240, 240, 0, 0, 240, 240, 0, 0, 4, 4, 55, 55, 0, 0
   \          00 F0 F0 00 
   \   000497 00 00 10 10  DC8 0, 0, 16, 16, 240, 240, 16, 16, 0, 0, 0, 4, 4, 55, 55, 0, 0, 0, 2
   \          F0 F0 10 10 
   \   0004AA 02 02 FE FC  DC8 2, 2, 254, 252, 0, 0, 0, 31, 31, 0, 1, 7, 6, 0, 0, 240, 240, 128
   \          00 00 00 1F 
   \   0004BC C0 70 30 00  DC8 192, 112, 48, 0, 0, 16, 16, 31, 31, 0, 0, 0, 0, 16, 16, 240, 240
   \          00 10 10 1F 
   \   0004CD 10 10 00 00  DC8 16, 16, 0, 0, 7, 7, 4, 7, 4, 7, 3, 0, 240, 240, 0, 224, 0, 240, 240
   \          07 07 04 07 
   \   0004E0 00 07 07 04  DC8 0, 7, 7, 4, 4, 7, 3, 0, 0, 240, 240, 0, 0, 240, 240, 0, 0, 3, 7, 4
   \          04 07 03 00 
   \   0004F4 04 07 03 00  DC8 4, 7, 3, 0, 0, 224, 240, 16, 16, 240, 224, 0, 0, 7, 7, 4, 4, 7, 3
   \          00 E0 F0 10 
   \   000507 00 00 FE FE  DC8 0, 0, 254, 254, 16, 16, 240, 224, 0, 0, 3, 7, 4, 4, 7, 7, 0, 0, 224
   \          10 10 F0 E0 
   \   00051A F0 10 10 FE  DC8 240, 16, 16, 254, 254, 0, 0, 7, 7, 1, 2, 6, 6, 0, 0, 240, 240, 0, 0
   \          FE 00 00 07 
   \   00052D 00 00 00 00  DC8 0, 0, 0, 0, 3, 7, 4, 4, 4, 4, 0, 0, 16, 144, 144, 144, 240, 96, 0
   \          03 07 04 04 
   \   000540 00 04 1F 1F  DC8 0, 4, 31, 31, 4, 4, 4, 0, 0, 0, 224, 240, 16, 16, 16, 0, 0, 7, 7, 0
   \          04 04 04 00 
   \   000554 00 07 07 00  DC8 0, 7, 7, 0, 0, 224, 240, 16, 16, 240, 240, 0, 0, 7, 7, 0, 0, 7, 7
   \          00 E0 F0 10 
   \   000567 00 00 C0 E0  DC8 0, 0, 192, 224, 48, 48, 224, 192, 0, 0, 7, 7, 0, 3, 0, 7, 7, 0, 192
   \          30 30 E0 C0 
   \   00057A F0 30 C0 30  DC8 240, 48, 192, 48, 240, 192, 0, 6, 7, 1, 1, 7, 6, 0, 0, 48, 112, 192
   \          F0 C0 00 06 
   \   00058C C0 70 30 00  DC8 192, 112, 48, 0, 0, 7, 7, 0, 0, 7, 7, 0, 2, 226, 242, 22, 28, 248
   \          00 07 07 00 
   \   00059E E0 00 00 04  DC8 224, 0, 0, 4, 4, 4, 5, 7, 6, 0, 0, 48, 112, 208, 144, 16, 16, 0, 0
   \          04 04 05 07 
   \   0005B1 00 01 0F 1E  DC8 0, 1, 15, 30, 16, 0, 0, 0, 128, 192, 120, 60, 4, 0, 0, 0, 0, 0, 31
   \          10 00 00 00 
   \   0005C4 1F 00 00 00  DC8 31, 0, 0, 0, 0, 0, 0, 254, 254, 0, 0, 0, 0, 0, 16, 30, 15, 1, 0, 0
   \          00 00 00 FE 
   \   0005D8 00 00 04 3C  DC8 0, 0, 4, 60, 120, 192, 128, 0, 12, 24, 16, 24, 12, 4, 12, 24, 0, 0
   \          78 C0 80 00 
   \   0005EA 00 00 00 00  DC8 0, 0, 0, 0, 0, 0
   \          00 00       
    122          {
    123          //---------------------Fixedsys font		
    124          //	(0) !(1) "(2) #(3) $(4) %(5) &(6) '(7) ((8) )(9) *(10) +(11) ,(12) -(13) .(14) /(15)
    125          //	 0(16) 1(17) 2(18) 3(19) 4(20) 5(21) 6(22) 7(23) 8(24) 9(25) :(26) ;(27) <(28) =(29) >(30) ?(31)
    126          //	 @(32) A(33) B(34) C(35) D(36) E(37) F(38) G(39) H(40) I(41) J(42) K(43) L(44) M(45) N(46) O(47)
    127          //	 P(48) Q(49) R(50) S(51) T(52) U(53) V(54) W(55) X(56) Y(57) Z(58) [(59) \(60) ](61) ^(62) _(63)
    128          //	 `(64) a(65) b(66) c(67) d(68) e(69) f(70) g(71) h(72) i(73) j(74) k(75) l(76) m(77) n(78) o(79)
    129          //	 p(80) q(81) r(82) s(83) t(84) u(85) v(86) w(87) x(88) y(89) z(90) {(91) |(92) }(93) ~(94)
    130          
    131          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*" ",0*/
    132          {0x00,0x00,0x0E,0x1F,0x1F,0x0E,0x00,0x00,0x00,0x00,0x00,0xB0,0xB0,0x00,0x00,0x00},/*"!",1*/
    133          {0x00,0x1C,0x1C,0x00,0x00,0x1C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*""",2*/
    134          {0x00,0x04,0x1F,0x1F,0x04,0x1F,0x1F,0x04,0x00,0x40,0xF0,0xF0,0x40,0xF0,0xF0,0x40},/*"#",3*/
    135          {0x00,0x0C,0x1E,0x73,0x71,0x18,0x08,0x00,0x00,0x20,0x30,0x1C,0x9C,0xF0,0x60,0x00},/*"$",4*/
    136          {0x18,0x3C,0x24,0x3D,0x1B,0x06,0x0C,0x00,0x00,0x60,0xC0,0xB0,0x78,0x48,0x78,0x30},/*"%",5*/
    137          {0x00,0x0D,0x1F,0x12,0x1E,0x0C,0x00,0x00,0x00,0xE0,0xF0,0x10,0x90,0xE0,0xF0,0x90},/*"&",6*/
    138          {0x00,0x00,0x00,0x1C,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"'",7*/
    139          {0x00,0x00,0x03,0x0F,0x1C,0x10,0x00,0x00,0x00,0x00,0xE0,0xF8,0x1C,0x04,0x00,0x00},/*"(",8*/
    140          {0x00,0x00,0x10,0x1C,0x0F,0x03,0x00,0x00,0x00,0x00,0x04,0x1C,0xF8,0xE0,0x00,0x00},/*")",9*/
    141          {0x00,0x01,0x05,0x07,0x03,0x07,0x05,0x01,0x00,0x00,0x40,0xC0,0x80,0xC0,0x40,0x00},/*"*",10*/
    142          {0x00,0x01,0x01,0x07,0x07,0x01,0x01,0x00,0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00},/*"+",11*/
    143          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x34,0x3C,0x38,0x00,0x00},/*",",12*/
    144          {0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"-",13*/
    145          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x30,0x00,0x00},/*".",14*/
    146          {0x00,0x00,0x00,0x01,0x07,0x1E,0x18,0x00,0x00,0x18,0x78,0xE0,0x80,0x00,0x00,0x00},/*"/",15*/
    147          {0x00,0x00,0x0F,0x1F,0x10,0x16,0x1F,0x0F,0x00,0x00,0xE0,0xF0,0xD0,0x10,0xF0,0xE0},/*"0",16*/
    148          {0x00,0x04,0x04,0x0C,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x00,0x00},/*"1",17*/
    149          {0x00,0x0C,0x1C,0x10,0x11,0x1F,0x0E,0x00,0x00,0x30,0x70,0xD0,0x90,0x10,0x10,0x00},/*"2",18*/
    150          {0x00,0x0C,0x1C,0x11,0x11,0x1F,0x0E,0x00,0x00,0x60,0x70,0x10,0x10,0xF0,0xE0,0x00},/*"3",19*/
    151          {0x00,0x00,0x1F,0x1F,0x00,0x07,0x07,0x00,0x00,0xC0,0xC0,0x40,0x40,0xF0,0xF0,0x40},/*"4",20*/
    152          {0x00,0x1F,0x1F,0x11,0x11,0x11,0x10,0x00,0x00,0x10,0x10,0x10,0x30,0xE0,0xC0,0x00},/*"5",21*/
    153          {0x00,0x03,0x07,0x1E,0x1A,0x13,0x01,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"6",22*/
    154          {0x00,0x10,0x10,0x11,0x17,0x1E,0x18,0x00,0x00,0x00,0x70,0xF0,0x80,0x00,0x00,0x00},/*"7",23*/
    155          {0x00,0x0E,0x1F,0x13,0x11,0x1F,0x0E,0x00,0x00,0xE0,0xF0,0x10,0x90,0xF0,0xE0,0x00},/*"8",24*/
    156          {0x00,0x0F,0x1F,0x10,0x10,0x1F,0x0F,0x00,0x00,0x00,0x90,0xB0,0xF0,0xC0,0x80,0x00},/*"9",25*/
    157          {0x00,0x00,0x00,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x30,0x00,0x00},/*":",26*/
    158          {0x00,0x00,0x00,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00,0x34,0x3C,0x38,0x00,0x00},/*";",27*/
    159          {0x00,0x01,0x03,0x06,0x0C,0x18,0x10,0x00,0x00,0x00,0x80,0xC0,0x60,0x30,0x10,0x00},/*"<",28*/
    160          {0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00},/*"=",29*/
    161          {0x00,0x10,0x18,0x0C,0x06,0x03,0x01,0x00,0x00,0x10,0x30,0x60,0xC0,0x80,0x00,0x00},/*">",30*/
    162          {0x00,0x0C,0x1C,0x11,0x13,0x1E,0x0C,0x00,0x00,0x00,0x00,0xB0,0xB0,0x00,0x00,0x00},/*"?",31*/
    163          {0x0F,0x1F,0x10,0x11,0x13,0x12,0x1F,0x0F,0xE0,0xF0,0x10,0x90,0xD0,0x50,0xD0,0xD0},/*"@",32*/
    164          {0x00,0x07,0x0F,0x18,0x18,0x0F,0x07,0x00,0x00,0xF0,0xF0,0x80,0x80,0xF0,0xF0,0x00},/*"A",33*/
    165          {0x00,0x1F,0x1F,0x11,0x11,0x1F,0x0E,0x00,0x00,0xF0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"B",34*/
    166          {0x00,0x0F,0x1F,0x10,0x10,0x1C,0x0C,0x00,0x00,0xE0,0xF0,0x10,0x10,0x70,0x60,0x00},/*"C",35*/
    167          {0x00,0x1F,0x1F,0x10,0x18,0x0F,0x07,0x00,0x00,0xF0,0xF0,0x10,0x30,0xE0,0xC0,0x00},/*"D",36*/
    168          {0x00,0x1F,0x1F,0x11,0x11,0x11,0x10,0x00,0x00,0xF0,0xF0,0x10,0x10,0x10,0x10,0x00},/*"E",37*/
    169          {0x00,0x1F,0x1F,0x11,0x11,0x11,0x10,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00},/*"F",38*/
    170          {0x00,0x0F,0x1F,0x10,0x10,0x1C,0x0C,0x00,0x00,0xE0,0xF0,0x10,0x90,0xF0,0xF0,0x00},/*"G",39*/
    171          {0x00,0x1F,0x1F,0x01,0x01,0x1F,0x1F,0x00,0x00,0xF0,0xF0,0x00,0x00,0xF0,0xF0,0x00},/*"H",40*/
    172          {0x00,0x00,0x10,0x1F,0x1F,0x10,0x00,0x00,0x00,0x00,0x10,0xF0,0xF0,0x10,0x00,0x00},/*"I",41*/
    173          {0x00,0x00,0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x60,0x70,0x10,0x10,0xF0,0xE0,0x00},/*"J",42*/
    174          {0x00,0x1F,0x1F,0x01,0x07,0x1E,0x18,0x00,0x00,0xF0,0xF0,0x00,0xC0,0xF0,0x30,0x00},/*"K",43*/
    175          {0x00,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0xF0,0xF0,0x10,0x10,0x10,0x10,0x00},/*"L",44*/
    176          {0x00,0x1F,0x1F,0x04,0x03,0x04,0x1F,0x1F,0x00,0xF0,0xF0,0x00,0x80,0x00,0xF0,0xF0},/*"M",45*/
    177          {0x00,0x1F,0x1F,0x06,0x03,0x01,0x1F,0x1F,0x00,0xF0,0xF0,0x00,0x00,0x80,0xF0,0xF0},/*"N",46*/
    178          {0x00,0x0F,0x1F,0x10,0x10,0x1F,0x0F,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"O",47*/
    179          {0x00,0x1F,0x1F,0x11,0x11,0x1F,0x0E,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00},/*"P",48*/
    180          {0x00,0x0F,0x1F,0x10,0x10,0x1F,0x0F,0x00,0x00,0xE0,0xF0,0x10,0x18,0xFC,0xE4,0x00},/*"Q",49*/
    181          {0x00,0x1F,0x1F,0x11,0x11,0x1F,0x0E,0x00,0x00,0xF0,0xF0,0x00,0x80,0xF0,0x70,0x00},/*"R",50*/
    182          {0x00,0x0C,0x1E,0x13,0x11,0x18,0x08,0x00,0x00,0x20,0x30,0x10,0x90,0xF0,0x60,0x00},/*"S",51*/
    183          {0x00,0x10,0x10,0x1F,0x1F,0x10,0x10,0x00,0x00,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00},/*"T",52*/
    184          {0x00,0x1F,0x1F,0x00,0x00,0x1F,0x1F,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"U",53*/
    185          {0x00,0x1F,0x1F,0x00,0x00,0x1F,0x1F,0x00,0x00,0xC0,0xE0,0x30,0x30,0xE0,0xC0,0x00},/*"V",54*/
    186          {0x00,0x1F,0x1F,0x00,0x03,0x00,0x1F,0x1F,0x00,0x80,0xF0,0x70,0x80,0x70,0xF0,0x80},/*"W",55*/
    187          {0x00,0x18,0x1C,0x07,0x03,0x1C,0x18,0x00,0x00,0x70,0xF0,0x00,0x80,0xF0,0x70,0x00},/*"X",56*/
    188          {0x00,0x1E,0x1F,0x01,0x01,0x1F,0x1E,0x00,0x00,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00},/*"Y",57*/
    189          {0x00,0x10,0x10,0x11,0x13,0x1E,0x1C,0x00,0x00,0x70,0xF0,0x90,0x10,0x10,0x10,0x00},/*"Z",58*/
    190          {0x00,0x00,0x1F,0x1F,0x10,0x10,0x00,0x00,0x00,0x00,0xFE,0xFE,0x02,0x02,0x00,0x00},/*"[",59*/
    191          {0x00,0x18,0x1E,0x07,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xE0,0x78,0x18,0x00},/*"\",60*/
    192          {0x00,0x00,0x10,0x10,0x1F,0x1F,0x00,0x00,0x00,0x00,0x02,0x02,0xFE,0xFE,0x00,0x00},/*"]",61*/
    193          {0x00,0x10,0x30,0x60,0x60,0x30,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"^",62*/
    194          {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02},/*"_",63*/
    195          {0x00,0x00,0x40,0x60,0x70,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"`",64*/
    196          {0x00,0x00,0x04,0x04,0x04,0x07,0x03,0x00,0x00,0x60,0xF0,0x90,0x90,0xF0,0xF0,0x00},/*"a",65*/
    197          {0x00,0x1F,0x1F,0x04,0x04,0x07,0x03,0x00,0x00,0xF0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"b",66*/
    198          {0x00,0x03,0x07,0x04,0x04,0x06,0x02,0x00,0x00,0xE0,0xF0,0x10,0x10,0x30,0x20,0x00},/*"c",67*/
    199          {0x00,0x03,0x07,0x04,0x04,0x1F,0x1F,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xF0,0x00},/*"d",68*/
    200          {0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,0x00,0xE0,0xF0,0x90,0x90,0x90,0x80,0x00},/*"e",69*/
    201          {0x00,0x01,0x0F,0x1F,0x11,0x11,0x11,0x00,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00,0x00},/*"f",70*/
    202          {0x00,0x03,0x07,0x04,0x04,0x07,0x07,0x00,0x00,0xE2,0xF2,0x12,0x12,0xFE,0xFC,0x00},/*"g",71*/
    203          {0x00,0x1F,0x1F,0x04,0x04,0x07,0x03,0x00,0x00,0xF0,0xF0,0x00,0x00,0xF0,0xF0,0x00},/*"h",72*/
    204          {0x00,0x04,0x04,0x37,0x37,0x00,0x00,0x00,0x00,0x10,0x10,0xF0,0xF0,0x10,0x10,0x00},/*"i",73*/
    205          {0x00,0x00,0x04,0x04,0x37,0x37,0x00,0x00,0x00,0x02,0x02,0x02,0xFE,0xFC,0x00,0x00},/*"j",74*/
    206          {0x00,0x1F,0x1F,0x00,0x01,0x07,0x06,0x00,0x00,0xF0,0xF0,0x80,0xC0,0x70,0x30,0x00},/*"k",75*/
    207          {0x00,0x10,0x10,0x1F,0x1F,0x00,0x00,0x00,0x00,0x10,0x10,0xF0,0xF0,0x10,0x10,0x00},/*"l",76*/
    208          {0x00,0x07,0x07,0x04,0x07,0x04,0x07,0x03,0x00,0xF0,0xF0,0x00,0xE0,0x00,0xF0,0xF0},/*"m",77*/
    209          {0x00,0x07,0x07,0x04,0x04,0x07,0x03,0x00,0x00,0xF0,0xF0,0x00,0x00,0xF0,0xF0,0x00},/*"n",78*/
    210          {0x00,0x03,0x07,0x04,0x04,0x07,0x03,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xE0,0x00},/*"o",79*/
    211          {0x00,0x07,0x07,0x04,0x04,0x07,0x03,0x00,0x00,0xFE,0xFE,0x10,0x10,0xF0,0xE0,0x00},/*"p",80*/
    212          {0x00,0x03,0x07,0x04,0x04,0x07,0x07,0x00,0x00,0xE0,0xF0,0x10,0x10,0xFE,0xFE,0x00},/*"q",81*/
    213          {0x00,0x07,0x07,0x01,0x02,0x06,0x06,0x00,0x00,0xF0,0xF0,0x00,0x00,0x00,0x00,0x00},/*"r",82*/
    214          {0x00,0x03,0x07,0x04,0x04,0x04,0x04,0x00,0x00,0x10,0x90,0x90,0x90,0xF0,0x60,0x00},/*"s",83*/
    215          {0x00,0x04,0x1F,0x1F,0x04,0x04,0x04,0x00,0x00,0x00,0xE0,0xF0,0x10,0x10,0x10,0x00},/*"t",84*/
    216          {0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00,0x00,0xE0,0xF0,0x10,0x10,0xF0,0xF0,0x00},/*"u",85*/
    217          {0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00,0x00,0xC0,0xE0,0x30,0x30,0xE0,0xC0,0x00},/*"v",86*/
    218          {0x00,0x07,0x07,0x00,0x03,0x00,0x07,0x07,0x00,0xC0,0xF0,0x30,0xC0,0x30,0xF0,0xC0},/*"w",87*/
    219          {0x00,0x06,0x07,0x01,0x01,0x07,0x06,0x00,0x00,0x30,0x70,0xC0,0xC0,0x70,0x30,0x00},/*"x",88*/
    220          {0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00,0x02,0xE2,0xF2,0x16,0x1C,0xF8,0xE0,0x00},/*"y",89*/
    221          {0x00,0x04,0x04,0x04,0x05,0x07,0x06,0x00,0x00,0x30,0x70,0xD0,0x90,0x10,0x10,0x00},/*"z",90*/
    222          {0x00,0x00,0x01,0x0F,0x1E,0x10,0x00,0x00,0x00,0x80,0xC0,0x78,0x3C,0x04,0x00,0x00},/*"{",91*/
    223          {0x00,0x00,0x00,0x1F,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0x00,0x00,0x00},/*"|",92*/
    224          {0x00,0x00,0x10,0x1E,0x0F,0x01,0x00,0x00,0x00,0x00,0x04,0x3C,0x78,0xC0,0x80,0x00},/*"}",93*/
    225          {0x0C,0x18,0x10,0x18,0x0C,0x04,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},/*"~",94*/
    226          };
    227          
    228          //void delay(unsigned int i)
    229          //{
    230          //	unsigned long cnt;
    231          //	while(i--)
    232          //	{
    233          //		cnt = 100;
    234          //		while(cnt--);
    235          //	}
    236          //}
    237          
    238          

   \                                 In section .near_func.text, align 1
    239          void LCD19264_Init(void)
    240          {
    241            GPIO_Init(LCD19264_SCK_GPIO,LCD19264_SCK_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \                     LCD19264_Init:
   \   000000 35 C0 ....   MOV       S:?b0, #0xc0
   \   000004 A6 10        LD        A, #0x10
   \   000006 AE 5014      LDW       X, #0x5014
   \   000009 CD ....      CALL      L:GPIO_Init
    242            GPIO_Init(LCD19264_SDA_GPIO,LCD19264_SDA_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \   00000C 35 C0 ....   MOV       S:?b0, #0xc0
   \   000010 A6 08        LD        A, #0x8
   \   000012 AE 5014      LDW       X, #0x5014
   \   000015 CD ....      CALL      L:GPIO_Init
    243            GPIO_Init(LCD19264_RST_GPIO,LCD19264_RST_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \   000018 35 C0 ....   MOV       S:?b0, #0xc0
   \   00001C A6 04        LD        A, #0x4
   \   00001E AE 5014      LDW       X, #0x5014
   \   000021 CD ....      CALL      L:GPIO_Init
    244            GPIO_Init(LCD19264_CD_GPIO,LCD19264_CD_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \   000024 35 C0 ....   MOV       S:?b0, #0xc0
   \   000028 A6 02        LD        A, #0x2
   \   00002A AE 5014      LDW       X, #0x5014
   \   00002D CD ....      CALL      L:GPIO_Init
    245            GPIO_Init(LCD19264_CS_GPIO,LCD19264_CS_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \   000030 35 C0 ....   MOV       S:?b0, #0xc0
   \   000034 A6 01        LD        A, #0x1
   \   000036 AE 5014      LDW       X, #0x5014
   \   000039 CD ....      CALL      L:GPIO_Init
    246            GPIO_Init(LCD19264_LED_GPIO,LCD19264_LED_PIN,GPIO_Mode_Out_PP_Low_Slow);
   \   00003C 35 C0 ....   MOV       S:?b0, #0xc0
   \   000040 A6 01        LD        A, #0x1
   \   000042 AE 5005      LDW       X, #0x5005
   \   000045 CD ....      CALL      L:GPIO_Init
    247            
    248            //---------TIM2 also used to triger ADC-----------
    249            //CLK_PeripheralClockConfig(CLK_Peripheral_TIM2,ENABLE);
    250            //TIM2_TimeBaseInit(TIM2_Prescaler_1,TIM2_CounterMode_Up,16000);//1000Hz
    251            TIM2_OC1Init(TIM2_OCMode_PWM1,TIM2_OutputState_Enable,8000,TIM2_OCPolarity_High,TIM2_OCIdleState_Reset);
   \   000048 3F ..        CLR       S:?b2
   \   00004A 3F ..        CLR       S:?b1
   \   00004C AE 1F40      LDW       X, #0x1f40
   \   00004F 35 01 ....   MOV       S:?b0, #0x1
   \   000053 A6 60        LD        A, #0x60
   \   000055 CD ....      CALL      L:TIM2_OC1Init
    252            TIM2_CCxCmd(TIM2_Channel_1,ENABLE);
   \   000058 35 01 ....   MOV       S:?b0, #0x1
   \   00005C 4F           CLR       A
   \   00005D CD ....      CALL      L:TIM2_CCxCmd
    253            TIM2_CtrlPWMOutputs(ENABLE);
   \   000060 A6 01        LD        A, #0x1
   \   000062 CD ....      CALL      L:TIM2_CtrlPWMOutputs
    254            //TIM2_Cmd(ENABLE);
    255            
    256            atomTimerDelay(15);
   \   000065 AE 000F      LDW       X, #0xf
   \   000068 BF ..        LDW       S:?w1, X
   \   00006A 5F           CLRW      X
   \   00006B BF ..        LDW       S:?w0, X
   \   00006D CD ....      CALL      L:atomTimerDelay
    257            LCD_RST_RESET;
   \   000070 A6 04        LD        A, #0x4
   \   000072 AE 5014      LDW       X, #0x5014
   \   000075 CD ....      CALL      L:GPIO_ResetBits
    258            atomTimerDelay (10);
   \   000078 AE 000A      LDW       X, #0xa
   \   00007B BF ..        LDW       S:?w1, X
   \   00007D 5F           CLRW      X
   \   00007E BF ..        LDW       S:?w0, X
   \   000080 CD ....      CALL      L:atomTimerDelay
    259            LCD_CS_SET;
   \   000083 A6 01        LD        A, #0x1
   \   000085 AE 5014      LDW       X, #0x5014
   \   000088 CD ....      CALL      L:GPIO_SetBits
    260            LCD_A0_SET;
   \   00008B A6 02        LD        A, #0x2
   \   00008D AE 5014      LDW       X, #0x5014
   \   000090 CD ....      CALL      L:GPIO_SetBits
    261            LCD_RST_SET;
   \   000093 A6 04        LD        A, #0x4
   \   000095 AE 5014      LDW       X, #0x5014
   \   000098 CD ....      CALL      L:GPIO_SetBits
    262            atomTimerDelay (10);
   \   00009B AE 000A      LDW       X, #0xa
   \   00009E BF ..        LDW       S:?w1, X
   \   0000A0 5F           CLRW      X
   \   0000A1 BF ..        LDW       S:?w0, X
   \   0000A3 CD ....      CALL      L:atomTimerDelay
    263            LCD_Write_REG(0x2f);
   \   0000A6 A6 2F        LD        A, #0x2f
   \   0000A8 CD ....      CALL      L:LCD_Write_REG
    264            LCD_Write_REG(0xaf);	//display ON
   \   0000AB A6 AF        LD        A, #0xaf
   \   0000AD CD ....      CALL      L:LCD_Write_REG
    265            LCD_Write_REG(0xa0);	//Normal direction mode
   \   0000B0 A6 A0        LD        A, #0xa0
   \   0000B2 CD ....      CALL      L:LCD_Write_REG
    266            LCD_SetVolumn(36);
   \   0000B5 A6 24        LD        A, #0x24
   \   0000B7 CD ....      CALL      L:LCD_SetVolumn
    267            LCD_SetIndicator(0x02);
   \   0000BA A6 02        LD        A, #0x2
   \   0000BC CD ....      CALL      L:LCD_SetIndicator
    268            LCD_DisplayStartAdr(0);
   \   0000BF 4F           CLR       A
   \   0000C0 CD ....      CALL      L:LCD_DisplayStartAdr
    269            LCD_ClearScreen(0x00);
   \   0000C3 4F           CLR       A
   \   0000C4 CC ....      JP        L:LCD_ClearScreen
    270            
    271          }

   \                                 In section .near_func.text, align 1, keep-with-next
    272          void LCD_Write_REG(unsigned char data)
    273          {
   \                     LCD_Write_REG:
   \   000000 CD ....      CALL      L:?push_w4
   \   000003 B7 ..        LD        S:?b9, A
    274          	char cnt = 0;
   \   000005 3F ..        CLR       S:?b8
    275          	LCD_CS_RESET;
   \   000007 A6 01        LD        A, #0x1
   \   000009 AE 5014      LDW       X, #0x5014
   \   00000C CD ....      CALL      L:GPIO_ResetBits
    276          	LCD_A0_RESET;
   \   00000F A6 02        LD        A, #0x2
   \   000011 AE 5014      LDW       X, #0x5014
   \   000014 CD ....      CALL      L:GPIO_ResetBits
    277          	for(cnt = 0;cnt<8;cnt++)
   \   000017 20 1A        JRA       L:??LCD_Write_REG_0
    278          	{
    279          		LCD_SCK_RESET;
    280          		//delay(1);
    281          		if(data&0x80)
    282          		{
    283          			LCD_SDI_SET;
    284          		}
    285          		else
    286          		{
    287          			LCD_SDI_RESET;
   \                     ??LCD_Write_REG_1:
   \   000019 A6 08        LD        A, #0x8
   \   00001B AE 5014      LDW       X, #0x5014
   \   00001E CD ....      CALL      L:GPIO_ResetBits
    288          		}
    289          		data<<=1;
   \                     ??LCD_Write_REG_2:
   \   000021 B6 ..        LD        A, S:?b9
   \   000023 48           SLL       A
   \   000024 B7 ..        LD        S:?b9, A
    290          		//delay(1);
    291          		LCD_SCK_SET;
   \   000026 A6 10        LD        A, #0x10
   \   000028 AE 5014      LDW       X, #0x5014
   \   00002B CD ....      CALL      L:GPIO_SetBits
   \   00002E B6 ..        LD        A, S:?b8
   \   000030 4C           INC       A
   \   000031 B7 ..        LD        S:?b8, A
   \                     ??LCD_Write_REG_0:
   \   000033 B6 ..        LD        A, S:?b8
   \   000035 A1 08        CP        A, #0x8
   \   000037 24 18        JRNC      L:??LCD_Write_REG_3
   \   000039 A6 10        LD        A, #0x10
   \   00003B AE 5014      LDW       X, #0x5014
   \   00003E CD ....      CALL      L:GPIO_ResetBits
   \   000041 B6 ..        LD        A, S:?b9
   \   000043 A5 80        BCP       A, #0x80
   \   000045 27 D2        JREQ      L:??LCD_Write_REG_1
   \   000047 A6 08        LD        A, #0x8
   \   000049 AE 5014      LDW       X, #0x5014
   \   00004C CD ....      CALL      L:GPIO_SetBits
   \   00004F 20 D0        JRA       L:??LCD_Write_REG_2
    292          		//delay(1);
    293          	}
    294          	LCD_CS_SET;
   \                     ??LCD_Write_REG_3:
   \   000051 A6 01        LD        A, #0x1
   \   000053 AE 5014      LDW       X, #0x5014
   \   000056 CD ....      CALL      L:GPIO_SetBits
    295          }
   \   000059 CC ....      JP        L:?epilogue_w4
    296          

   \                                 In section .near_func.text, align 1, keep-with-next
    297          void LCD_Write_RAM(unsigned char data)
    298          {
   \                     LCD_Write_RAM:
   \   000000 CD ....      CALL      L:?push_w4
   \   000003 B7 ..        LD        S:?b9, A
    299          	char cnt = 0;
   \   000005 3F ..        CLR       S:?b8
    300          	LCD_CS_RESET;
   \   000007 A6 01        LD        A, #0x1
   \   000009 AE 5014      LDW       X, #0x5014
   \   00000C CD ....      CALL      L:GPIO_ResetBits
    301          	LCD_A0_SET;
   \   00000F A6 02        LD        A, #0x2
   \   000011 AE 5014      LDW       X, #0x5014
   \   000014 CD ....      CALL      L:GPIO_SetBits
    302          	for(cnt = 0;cnt<8;cnt++)
   \   000017 20 1A        JRA       L:??LCD_Write_RAM_0
    303          	{
    304          		LCD_SCK_RESET;
    305          	//	delay(1);
    306          		if(data&0x80)
    307          		{
    308          			LCD_SDI_SET;
    309          		}
    310          		else
    311          		{
    312          			LCD_SDI_RESET;
   \                     ??LCD_Write_RAM_1:
   \   000019 A6 08        LD        A, #0x8
   \   00001B AE 5014      LDW       X, #0x5014
   \   00001E CD ....      CALL      L:GPIO_ResetBits
    313          		}
    314          		data<<=1;
   \                     ??LCD_Write_RAM_2:
   \   000021 B6 ..        LD        A, S:?b9
   \   000023 48           SLL       A
   \   000024 B7 ..        LD        S:?b9, A
    315          	//	delay(1);
    316          		LCD_SCK_SET;
   \   000026 A6 10        LD        A, #0x10
   \   000028 AE 5014      LDW       X, #0x5014
   \   00002B CD ....      CALL      L:GPIO_SetBits
   \   00002E B6 ..        LD        A, S:?b8
   \   000030 4C           INC       A
   \   000031 B7 ..        LD        S:?b8, A
   \                     ??LCD_Write_RAM_0:
   \   000033 B6 ..        LD        A, S:?b8
   \   000035 A1 08        CP        A, #0x8
   \   000037 24 18        JRNC      L:??LCD_Write_RAM_3
   \   000039 A6 10        LD        A, #0x10
   \   00003B AE 5014      LDW       X, #0x5014
   \   00003E CD ....      CALL      L:GPIO_ResetBits
   \   000041 B6 ..        LD        A, S:?b9
   \   000043 A5 80        BCP       A, #0x80
   \   000045 27 D2        JREQ      L:??LCD_Write_RAM_1
   \   000047 A6 08        LD        A, #0x8
   \   000049 AE 5014      LDW       X, #0x5014
   \   00004C CD ....      CALL      L:GPIO_SetBits
   \   00004F 20 D0        JRA       L:??LCD_Write_RAM_2
    317          	//	delay(1);
    318          	}
    319          	LCD_CS_SET;
   \                     ??LCD_Write_RAM_3:
   \   000051 A6 01        LD        A, #0x1
   \   000053 AE 5014      LDW       X, #0x5014
   \   000056 CD ....      CALL      L:GPIO_SetBits
    320          }
   \   000059 CC ....      JP        L:?epilogue_w4
    321          
    322          //----------------0-131-------------------

   \                                 In section .near_func.text, align 1, keep-with-next
    323          void LCD_WriteColumnAdr(unsigned char adr)
    324          {
   \                     LCD_WriteColumnAdr:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    325          	LCD_Write_REG(0x10| (adr>>4));
   \   000005 4E           SWAP      A
   \   000006 A4 0F        AND       A, #0xf
   \   000008 AA 10        OR        A, #0x10
   \   00000A CD ....      CALL      L:LCD_Write_REG
    326          	LCD_Write_REG(adr&0x0f);
   \   00000D B6 ..        LD        A, S:?b8
   \   00000F A4 0F        AND       A, #0xf
   \   000011 CD ....      CALL      L:LCD_Write_REG
    327          }
   \   000014 32 ....      POP       S:?b8
   \   000017 81           RET
    328          
    329          //--------------0-8-------------------

   \                                 In section .near_func.text, align 1, keep-with-next
    330          void LCD_WritePageAdr(unsigned char adr)
    331          {
    332          	LCD_Write_REG(0xb0| (adr & 0x0f));
   \                     LCD_WritePageAdr:
   \   000000 A4 0F        AND       A, #0xf
   \   000002 AA B0        OR        A, #0xb0
   \   000004 CC ....      JP        L:LCD_Write_REG
    333          }
    334          

   \                                 In section .near_func.text, align 1, keep-with-next
    335          void LCD_DisplayStartAdr(unsigned char adr)
    336          {
    337          	LCD_Write_REG(0x40| (adr & 0x3f));
   \                     LCD_DisplayStartAdr:
   \   000000 A4 3F        AND       A, #0x3f
   \   000002 AA 40        OR        A, #0x40
   \   000004 CC ....      JP        L:LCD_Write_REG
    338          }
    339          
    340          //-------------0-63---------------------------

   \                                 In section .near_func.text, align 1, keep-with-next
    341          void LCD_SetVolumn(unsigned char vol)
    342          {
   \                     LCD_SetVolumn:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    343          	LCD_Write_REG(0x81);
   \   000005 A6 81        LD        A, #0x81
   \   000007 CD ....      CALL      L:LCD_Write_REG
    344          	LCD_Write_REG(vol&0x3f);
   \   00000A B6 ..        LD        A, S:?b8
   \   00000C A4 3F        AND       A, #0x3f
   \   00000E CD ....      CALL      L:LCD_Write_REG
    345          }
   \   000011 32 ....      POP       S:?b8
   \   000014 81           RET
    346          

   \                                 In section .near_func.text, align 1, keep-with-next
    347          void LCD_SetIndicator(unsigned char vol)
    348          {
   \                     LCD_SetIndicator:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    349          	LCD_Write_REG(0xad);
   \   000005 A6 AD        LD        A, #0xad
   \   000007 CD ....      CALL      L:LCD_Write_REG
    350          	LCD_Write_REG(vol&0x03);
   \   00000A B6 ..        LD        A, S:?b8
   \   00000C A4 03        AND       A, #0x3
   \   00000E CD ....      CALL      L:LCD_Write_REG
    351          }
   \   000011 32 ....      POP       S:?b8
   \   000014 81           RET
    352          
    353          //-----------------X:0-127, Y:0-7 Dot: 0 off, 1 on---------------------

   \                                 In section .near_func.text, align 1, keep-with-next
    354          void LCD_DisplayByte(uint8_t x, uint8_t y, uint8_t data)
    355          {
   \                     LCD_DisplayByte:
   \   000000 CD ....      CALL      L:?push_w4
   \   000003 45 .. ..     MOV       S:?b8, S:?b0
   \   000006 45 .. ..     MOV       S:?b9, S:?b1
    356          	LCD_WriteColumnAdr(x);
   \   000009 CD ....      CALL      L:LCD_WriteColumnAdr
    357          	LCD_WritePageAdr(y);
   \   00000C B6 ..        LD        A, S:?b8
   \   00000E CD ....      CALL      L:LCD_WritePageAdr
    358          	LCD_Write_RAM(data);
   \   000011 B6 ..        LD        A, S:?b9
   \   000013 CD ....      CALL      L:LCD_Write_RAM
    359          }
   \   000016 CC ....      JP        L:?epilogue_w4
    360          

   \                                 In section .near_func.text, align 1, keep-with-next
    361          void LCD_ClearScreen(unsigned char dat)
    362          {
   \                     LCD_ClearScreen:
   \   000000 CD ....      CALL      L:?push_w4
   \   000003 3B ....      PUSH      S:?b10
   \   000006 B7 ..        LD        S:?b10, A
    363          	unsigned char page,column;
    364          	
    365          	for(page = 0;page<9;page++)
   \   000008 3F ..        CLR       S:?b9
   \   00000A 20 15        JRA       L:??LCD_ClearScreen_0
    366          	{
    367          		LCD_WritePageAdr(page);
    368          		LCD_WriteColumnAdr(0);
    369          		for(column = 0;column<128;column++)
    370          		{
    371          			LCD_Write_RAM(dat);
   \                     ??LCD_ClearScreen_1:
   \   00000C B6 ..        LD        A, S:?b10
   \   00000E CD ....      CALL      L:LCD_Write_RAM
    372          		}
   \   000011 B6 ..        LD        A, S:?b8
   \   000013 4C           INC       A
   \   000014 B7 ..        LD        S:?b8, A
   \                     ??LCD_ClearScreen_2:
   \   000016 B6 ..        LD        A, S:?b8
   \   000018 A1 80        CP        A, #0x80
   \   00001A 25 F0        JRC       L:??LCD_ClearScreen_1
   \   00001C B6 ..        LD        A, S:?b9
   \   00001E 4C           INC       A
   \   00001F B7 ..        LD        S:?b9, A
   \                     ??LCD_ClearScreen_0:
   \   000021 B6 ..        LD        A, S:?b9
   \   000023 A1 09        CP        A, #0x9
   \   000025 24 0B        JRNC      L:??LCD_ClearScreen_3
   \   000027 CD ....      CALL      L:LCD_WritePageAdr
   \   00002A 4F           CLR       A
   \   00002B CD ....      CALL      L:LCD_WriteColumnAdr
   \   00002E 3F ..        CLR       S:?b8
   \   000030 20 E4        JRA       L:??LCD_ClearScreen_2
    373          	}
    374          	
    375          }
   \                     ??LCD_ClearScreen_3:
   \   000032 32 ....      POP       S:?b10
   \   000035 CC ....      JP        L:?epilogue_w4
    376          
    377          //-------------x: 0-127, Y: 0-7

   \                                 In section .near_func.text, align 1, keep-with-next
    378          void LCD_Put6x8Char(uint8_t x, uint8_t y, char asc)
    379          {
   \                     LCD_Put6x8Char:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 B7 ..        LD        S:?b10, A
   \   000005 45 .. ..     MOV       S:?b9, S:?b0
   \   000008 45 .. ..     MOV       S:?b11, S:?b1
    380          	uint8_t cnt = 0;
   \   00000B 3F ..        CLR       S:?b8
    381          	for(cnt = 0; cnt<6; cnt++)
   \   00000D 20 2F        JRA       L:??LCD_Put6x8Char_0
    382          	{
    383          	
    384                    LCD_DisplayByte(x+cnt,y,(LCD_6x8ASCTable[asc - 32][cnt]));
   \                     ??LCD_Put6x8Char_1:
   \   00000F 5F           CLRW      X
   \   000010 97           LD        XL, A
   \   000011 1C ....      ADDW      X, #LCD_6x8ASCTable - 192
   \   000014 9093         LDW       Y, X
   \   000016 3F ..        CLR       S:?b2
   \   000018 45 .. ..     MOV       S:?b3, S:?b11
   \   00001B AE 0006      LDW       X, #0x6
   \   00001E BF ..        LDW       S:?w0, X
   \   000020 BE ..        LDW       X, S:?w1
   \   000022 CD ....      CALL      L:?mul16_x_x_w0
   \   000025 BF ..        LDW       S:?w0, X
   \   000027 93           LDW       X, Y
   \   000028 72BB ....    ADDW      X, S:?w0
   \   00002C F6           LD        A, (X)
   \   00002D B7 ..        LD        S:?b1, A
   \   00002F 45 .. ..     MOV       S:?b0, S:?b9
   \   000032 B6 ..        LD        A, S:?b8
   \   000034 BB ..        ADD       A, S:?b10
   \   000036 CD ....      CALL      L:LCD_DisplayByte
    385          			
    386          	}
   \   000039 B6 ..        LD        A, S:?b8
   \   00003B 4C           INC       A
   \   00003C B7 ..        LD        S:?b8, A
   \                     ??LCD_Put6x8Char_0:
   \   00003E B6 ..        LD        A, S:?b8
   \   000040 A1 06        CP        A, #0x6
   \   000042 25 CB        JRC       L:??LCD_Put6x8Char_1
    387          	
    388          }
   \   000044 CC ....      JP        L:?epilogue_l2
    389          //-------------x: 0-127, Y: 0-7

   \                                 In section .near_func.text, align 1, keep-with-next
    390          void LCD_Put6x8Str(uint8_t x, uint8_t y, char *ptr)
    391          {
   \                     LCD_Put6x8Str:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 3B ....      PUSH      S:?b12
   \   000006 B7 ..        LD        S:?b11, A
   \   000008 45 .. ..     MOV       S:?b12, S:?b0
   \   00000B BF ..        LDW       S:?w4, X
    392          	uint8_t length = strlen(ptr);
   \   00000D CD ....      CALL      L:strlen
   \   000010 41           EXG       A, XL
   \   000011 B7 ..        LD        S:?b10, A
   \   000013 20 18        JRA       L:??LCD_Put6x8Str_0
    393          	while(length--)
    394          	{
    395          		LCD_Put6x8Char(x,y,*ptr);
   \                     ??LCD_Put6x8Str_1:
   \   000015 92C6 ..      LD        A, [S:?w4.w]
   \   000018 B7 ..        LD        S:?b1, A
   \   00001A 45 .. ..     MOV       S:?b0, S:?b12
   \   00001D B6 ..        LD        A, S:?b11
   \   00001F CD ....      CALL      L:LCD_Put6x8Char
    396          		x+=6;
   \   000022 B6 ..        LD        A, S:?b11
   \   000024 AB 06        ADD       A, #0x6
   \   000026 B7 ..        LD        S:?b11, A
    397          		ptr++;
   \   000028 BE ..        LDW       X, S:?w4
   \   00002A 5C           INCW      X
   \   00002B BF ..        LDW       S:?w4, X
    398          	}
   \                     ??LCD_Put6x8Str_0:
   \   00002D B6 ..        LD        A, S:?b10
   \   00002F B7 ..        LD        S:?b0, A
   \   000031 4A           DEC       A
   \   000032 B7 ..        LD        S:?b10, A
   \   000034 3D ..        TNZ       S:?b0
   \   000036 26 DD        JRNE      L:??LCD_Put6x8Str_1
    399          	
    400          }
   \   000038 32 ....      POP       S:?b12
   \   00003B CC ....      JP        L:?epilogue_l2
    401          

   \                                 In section .near_func.text, align 1, keep-with-next
    402          void LCD_Put8x16Char(uint8_t x, uint8_t y, char asc)
    403          {
   \                     LCD_Put8x16Char:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 B7 ..        LD        S:?b11, A
   \   000005 45 .. ..     MOV       S:?b10, S:?b0
   \   000008 45 .. ..     MOV       S:?b9, S:?b1
    404          	uint8_t cnt = 0;
   \   00000B 3F ..        CLR       S:?b8
    405          	for(cnt = 0; cnt<16; cnt++)
   \   00000D 20 0F        JRA       L:??LCD_Put8x16Char_0
    406          	{
    407          		if(cnt<8)	//------high lines
    408          		{
    409          			
    410                              LCD_DisplayByte(x+cnt,y+1,(LCD_8x16ASCTable[asc - 32][cnt]));
    411          		
    412          		}
    413          		else
    414          		{
    415          			
    416          			
    417                              LCD_DisplayByte(x+cnt-8,y,(LCD_8x16ASCTable[asc - 32][cnt]));
   \                     ??LCD_Put8x16Char_1:
   \   00000F 45 .. ..     MOV       S:?b0, S:?b10
   \   000012 B6 ..        LD        A, S:?b2
   \   000014 AB F8        ADD       A, #0xf8
   \   000016 CD ....      CALL      L:LCD_DisplayByte
    418          			
    419          			
    420          		}
   \                     ??LCD_Put8x16Char_2:
   \   000019 B6 ..        LD        A, S:?b8
   \   00001B 4C           INC       A
   \   00001C B7 ..        LD        S:?b8, A
   \                     ??LCD_Put8x16Char_0:
   \   00001E B6 ..        LD        A, S:?b8
   \   000020 A1 10        CP        A, #0x10
   \   000022 24 31        JRNC      L:??LCD_Put8x16Char_3
   \   000024 905F         CLRW      Y
   \   000026 9097         LD        YL, A
   \   000028 72A9 ....    ADDW      Y, #LCD_8x16ASCTable - 512
   \   00002C 5F           CLRW      X
   \   00002D B6 ..        LD        A, S:?b9
   \   00002F 97           LD        XL, A
   \   000030 CD ....      CALL      L:?sll16_x_x_4
   \   000033 BF ..        LDW       S:?w0, X
   \   000035 72B9 ....    ADDW      Y, S:?w0
   \   000039 90F6         LD        A, (Y)
   \   00003B B7 ..        LD        S:?b1, A
   \   00003D B6 ..        LD        A, S:?b8
   \   00003F BB ..        ADD       A, S:?b11
   \   000041 B7 ..        LD        S:?b2, A
   \   000043 B6 ..        LD        A, S:?b8
   \   000045 A1 08        CP        A, #0x8
   \   000047 24 C6        JRNC      L:??LCD_Put8x16Char_1
   \   000049 B6 ..        LD        A, S:?b10
   \   00004B 4C           INC       A
   \   00004C B7 ..        LD        S:?b0, A
   \   00004E B6 ..        LD        A, S:?b2
   \   000050 CD ....      CALL      L:LCD_DisplayByte
   \   000053 20 C4        JRA       L:??LCD_Put8x16Char_2
    421          	}
    422          	
    423          }
   \                     ??LCD_Put8x16Char_3:
   \   000055 CC ....      JP        L:?epilogue_l2
    424          

   \                                 In section .near_func.text, align 1, keep-with-next
    425          void LCD_Put8x16Str(uint8_t x, uint8_t y, char *ptr)
    426          {
   \                     LCD_Put8x16Str:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 3B ....      PUSH      S:?b12
   \   000006 B7 ..        LD        S:?b11, A
   \   000008 45 .. ..     MOV       S:?b12, S:?b0
   \   00000B BF ..        LDW       S:?w4, X
    427          	uint8_t length = strlen(ptr);
   \   00000D CD ....      CALL      L:strlen
   \   000010 41           EXG       A, XL
   \   000011 B7 ..        LD        S:?b10, A
   \   000013 20 18        JRA       L:??LCD_Put8x16Str_0
    428          	while(length--)
    429          	{
    430          		LCD_Put8x16Char(x,y,*ptr);
   \                     ??LCD_Put8x16Str_1:
   \   000015 92C6 ..      LD        A, [S:?w4.w]
   \   000018 B7 ..        LD        S:?b1, A
   \   00001A 45 .. ..     MOV       S:?b0, S:?b12
   \   00001D B6 ..        LD        A, S:?b11
   \   00001F CD ....      CALL      L:LCD_Put8x16Char
    431          		x+=8;
   \   000022 B6 ..        LD        A, S:?b11
   \   000024 AB 08        ADD       A, #0x8
   \   000026 B7 ..        LD        S:?b11, A
    432          		ptr++;
   \   000028 BE ..        LDW       X, S:?w4
   \   00002A 5C           INCW      X
   \   00002B BF ..        LDW       S:?w4, X
    433          	}
   \                     ??LCD_Put8x16Str_0:
   \   00002D B6 ..        LD        A, S:?b10
   \   00002F B7 ..        LD        S:?b0, A
   \   000031 4A           DEC       A
   \   000032 B7 ..        LD        S:?b10, A
   \   000034 3D ..        TNZ       S:?b0
   \   000036 26 DD        JRNE      L:??LCD_Put8x16Str_1
    434          	
    435          }
   \   000038 32 ....      POP       S:?b12
   \   00003B CC ....      JP        L:?epilogue_l2
    436          

   \                                 In section .near_func.text, align 1, keep-with-next
    437          void LCD_Put6x8IntNumber(uint8_t x, uint8_t y, uint16_t num)
    438          {
   \                     LCD_Put6x8IntNumber:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 52 05        SUB       SP, #0x5
   \   000005 B7 ..        LD        S:?b11, A
   \   000007 45 .. ..     MOV       S:?b10, S:?b0
   \   00000A BF ..        LDW       S:?w0, X
    439            char temp[5] = {0};
   \   00000C 90AE ....    LDW       Y, #?_0
   \   000010 96           LDW       X, SP
   \   000011 5C           INCW      X
   \   000012 89           PUSHW     X
   \   000013 A6 05        LD        A, #0x5
   \   000015 CD ....      CALL      L:?move1616_v_x_y_a
   \   000018 85           POPW      X
    440            char cnt;
    441            temp[0] = num/10000+48; //convert to ASC
   \   000019 90AE 2710    LDW       Y, #0x2710
   \   00001D BE ..        LDW       X, S:?w0
   \   00001F 65           DIVW      X, Y
   \   000020 9F           LD        A, XL
   \   000021 AB 30        ADD       A, #0x30
   \   000023 6B 01        LD        (0x1,SP), A
    442            temp[1] = num%10000/1000+48; //convert to ASC
   \   000025 90AE 2710    LDW       Y, #0x2710
   \   000029 BE ..        LDW       X, S:?w0
   \   00002B 65           DIVW      X, Y
   \   00002C 93           LDW       X, Y
   \   00002D 90AE 03E8    LDW       Y, #0x3e8
   \   000031 65           DIVW      X, Y
   \   000032 9F           LD        A, XL
   \   000033 AB 30        ADD       A, #0x30
   \   000035 6B 02        LD        (0x2,SP), A
    443            temp[2] = num%1000/100+48; //convert to ASC
   \   000037 90AE 03E8    LDW       Y, #0x3e8
   \   00003B BE ..        LDW       X, S:?w0
   \   00003D 65           DIVW      X, Y
   \   00003E 93           LDW       X, Y
   \   00003F 90AE 0064    LDW       Y, #0x64
   \   000043 65           DIVW      X, Y
   \   000044 9F           LD        A, XL
   \   000045 AB 30        ADD       A, #0x30
   \   000047 6B 03        LD        (0x3,SP), A
    444            temp[3] = num%100/10+48; //convert to ASC
   \   000049 90AE 0064    LDW       Y, #0x64
   \   00004D BE ..        LDW       X, S:?w0
   \   00004F 65           DIVW      X, Y
   \   000050 93           LDW       X, Y
   \   000051 90AE 000A    LDW       Y, #0xa
   \   000055 65           DIVW      X, Y
   \   000056 9F           LD        A, XL
   \   000057 AB 30        ADD       A, #0x30
   \   000059 6B 04        LD        (0x4,SP), A
    445            temp[4] = num%10+48; //convert to ASC
   \   00005B 90AE 000A    LDW       Y, #0xa
   \   00005F BE ..        LDW       X, S:?w0
   \   000061 65           DIVW      X, Y
   \   000062 909F         LD        A, YL
   \   000064 AB 30        ADD       A, #0x30
   \   000066 6B 05        LD        (0x5,SP), A
    446            for(cnt = 0;cnt<5;cnt++)
   \   000068 3F ..        CLR       S:?b9
   \   00006A 20 1F        JRA       L:??LCD_Put6x8IntNumber_0
    447            {
    448              LCD_Put6x8Char(x+cnt*6,y,temp[cnt]);
   \                     ??LCD_Put6x8IntNumber_1:
   \   00006C 3F ..        CLR       S:?b8
   \   00006E 96           LDW       X, SP
   \   00006F 5C           INCW      X
   \   000070 72BB ....    ADDW      X, S:?w4
   \   000074 F6           LD        A, (X)
   \   000075 B7 ..        LD        S:?b1, A
   \   000077 45 .. ..     MOV       S:?b0, S:?b10
   \   00007A A6 06        LD        A, #0x6
   \   00007C 97           LD        XL, A
   \   00007D B6 ..        LD        A, S:?b9
   \   00007F 42           MUL       X, A
   \   000080 9F           LD        A, XL
   \   000081 BB ..        ADD       A, S:?b11
   \   000083 CD ....      CALL      L:LCD_Put6x8Char
    449            }
   \   000086 B6 ..        LD        A, S:?b9
   \   000088 4C           INC       A
   \   000089 B7 ..        LD        S:?b9, A
   \                     ??LCD_Put6x8IntNumber_0:
   \   00008B B6 ..        LD        A, S:?b9
   \   00008D A1 05        CP        A, #0x5
   \   00008F 25 DB        JRC       L:??LCD_Put6x8IntNumber_1
    450          }
   \   000091 5B 05        ADD       SP, #0x5
   \   000093 CC ....      JP        L:?epilogue_l2
    451          

   \                                 In section .near_func.text, align 1, keep-with-next
    452          void LCD_Put8x16IntNumber(uint8_t x, uint8_t y, uint16_t num)
    453          {
   \                     LCD_Put8x16IntNumber:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 52 05        SUB       SP, #0x5
   \   000005 B7 ..        LD        S:?b11, A
   \   000007 45 .. ..     MOV       S:?b10, S:?b0
   \   00000A BF ..        LDW       S:?w0, X
    454            char temp[5] = {0};
   \   00000C 90AE ....    LDW       Y, #?_1
   \   000010 96           LDW       X, SP
   \   000011 5C           INCW      X
   \   000012 89           PUSHW     X
   \   000013 A6 05        LD        A, #0x5
   \   000015 CD ....      CALL      L:?move1616_v_x_y_a
   \   000018 85           POPW      X
    455            char cnt;
    456            temp[0] = num/10000+48; //convert to ASC
   \   000019 90AE 2710    LDW       Y, #0x2710
   \   00001D BE ..        LDW       X, S:?w0
   \   00001F 65           DIVW      X, Y
   \   000020 9F           LD        A, XL
   \   000021 AB 30        ADD       A, #0x30
   \   000023 6B 01        LD        (0x1,SP), A
    457            temp[1] = num%10000/1000+48; //convert to ASC
   \   000025 90AE 2710    LDW       Y, #0x2710
   \   000029 BE ..        LDW       X, S:?w0
   \   00002B 65           DIVW      X, Y
   \   00002C 93           LDW       X, Y
   \   00002D 90AE 03E8    LDW       Y, #0x3e8
   \   000031 65           DIVW      X, Y
   \   000032 9F           LD        A, XL
   \   000033 AB 30        ADD       A, #0x30
   \   000035 6B 02        LD        (0x2,SP), A
    458            temp[2] = num%1000/100+48; //convert to ASC
   \   000037 90AE 03E8    LDW       Y, #0x3e8
   \   00003B BE ..        LDW       X, S:?w0
   \   00003D 65           DIVW      X, Y
   \   00003E 93           LDW       X, Y
   \   00003F 90AE 0064    LDW       Y, #0x64
   \   000043 65           DIVW      X, Y
   \   000044 9F           LD        A, XL
   \   000045 AB 30        ADD       A, #0x30
   \   000047 6B 03        LD        (0x3,SP), A
    459            temp[3] = num%100/10+48; //convert to ASC
   \   000049 90AE 0064    LDW       Y, #0x64
   \   00004D BE ..        LDW       X, S:?w0
   \   00004F 65           DIVW      X, Y
   \   000050 93           LDW       X, Y
   \   000051 90AE 000A    LDW       Y, #0xa
   \   000055 65           DIVW      X, Y
   \   000056 9F           LD        A, XL
   \   000057 AB 30        ADD       A, #0x30
   \   000059 6B 04        LD        (0x4,SP), A
    460            temp[4] = num%10+48; //convert to ASC
   \   00005B 90AE 000A    LDW       Y, #0xa
   \   00005F BE ..        LDW       X, S:?w0
   \   000061 65           DIVW      X, Y
   \   000062 909F         LD        A, YL
   \   000064 AB 30        ADD       A, #0x30
   \   000066 6B 05        LD        (0x5,SP), A
    461            for(cnt = 0;cnt<5;cnt++)
   \   000068 3F ..        CLR       S:?b9
   \   00006A 20 1D        JRA       L:??LCD_Put8x16IntNumber_0
    462            {
    463              LCD_Put8x16Char(x+cnt*8,y,temp[cnt]);
   \                     ??LCD_Put8x16IntNumber_1:
   \   00006C 3F ..        CLR       S:?b8
   \   00006E 96           LDW       X, SP
   \   00006F 5C           INCW      X
   \   000070 72BB ....    ADDW      X, S:?w4
   \   000074 F6           LD        A, (X)
   \   000075 B7 ..        LD        S:?b1, A
   \   000077 45 .. ..     MOV       S:?b0, S:?b10
   \   00007A B6 ..        LD        A, S:?b9
   \   00007C 48           SLL       A
   \   00007D 48           SLL       A
   \   00007E 48           SLL       A
   \   00007F BB ..        ADD       A, S:?b11
   \   000081 CD ....      CALL      L:LCD_Put8x16Char
    464            }
   \   000084 B6 ..        LD        A, S:?b9
   \   000086 4C           INC       A
   \   000087 B7 ..        LD        S:?b9, A
   \                     ??LCD_Put8x16IntNumber_0:
   \   000089 B6 ..        LD        A, S:?b9
   \   00008B A1 05        CP        A, #0x5
   \   00008D 25 DD        JRC       L:??LCD_Put8x16IntNumber_1
    465          }
   \   00008F 5B 05        ADD       SP, #0x5
   \   000091 CC ....      JP        L:?epilogue_l2
    466          

   \                                 In section .near_func.text, align 1, keep-with-next
    467          void LCD_Draw8BitBar(uint8_t x1, uint8_t x2, uint8_t y, uint8_t cursor)
    468          {
   \                     LCD_Draw8BitBar:
   \   000000 CD ....      CALL      L:?push_l2
   \   000003 B7 ..        LD        S:?b10, A
   \   000005 45 .. ..     MOV       S:?b11, S:?b0
   \   000008 45 .. ..     MOV       S:?b8, S:?b1
   \   00000B 45 .. ..     MOV       S:?b9, S:?b2
    469            uint8_t cnt = 0;
    470            LCD_DisplayByte(x1,y,0xff);
   \   00000E 35 FF ....   MOV       S:?b1, #0xff
   \   000012 45 .. ..     MOV       S:?b0, S:?b8
   \   000015 CD ....      CALL      L:LCD_DisplayByte
    471            LCD_DisplayByte(x2,y,0xff);
   \   000018 35 FF ....   MOV       S:?b1, #0xff
   \   00001C 45 .. ..     MOV       S:?b0, S:?b8
   \   00001F B6 ..        LD        A, S:?b11
   \   000021 CD ....      CALL      L:LCD_DisplayByte
    472            LCD_DisplayByte(x1+cursor,y,0xff);
   \   000024 B6 ..        LD        A, S:?b9
   \   000026 BB ..        ADD       A, S:?b10
   \   000028 B7 ..        LD        S:?b9, A
   \   00002A 35 FF ....   MOV       S:?b1, #0xff
   \   00002E 45 .. ..     MOV       S:?b0, S:?b8
   \   000031 CD ....      CALL      L:LCD_DisplayByte
    473            for(cnt = x1+1; cnt<x2; cnt++)
   \   000034 B6 ..        LD        A, S:?b10
   \   000036 4C           INC       A
   \   000037 B7 ..        LD        S:?b10, A
   \   000039 20 0F        JRA       L:??LCD_Draw8BitBar_0
    474            {
    475              LCD_DisplayByte(cnt,y,0x81);       
   \                     ??LCD_Draw8BitBar_1:
   \   00003B 35 81 ....   MOV       S:?b1, #0x81
   \   00003F 45 .. ..     MOV       S:?b0, S:?b8
   \   000042 CD ....      CALL      L:LCD_DisplayByte
    476            }
   \   000045 B6 ..        LD        A, S:?b10
   \   000047 4C           INC       A
   \   000048 B7 ..        LD        S:?b10, A
   \                     ??LCD_Draw8BitBar_0:
   \   00004A B6 ..        LD        A, S:?b10
   \   00004C B1 ..        CP        A, S:?b11
   \   00004E 25 EB        JRC       L:??LCD_Draw8BitBar_1
    477            LCD_DisplayByte(x1+cursor,y,0xff);
   \   000050 35 FF ....   MOV       S:?b1, #0xff
   \   000054 45 .. ..     MOV       S:?b0, S:?b8
   \   000057 B6 ..        LD        A, S:?b9
   \   000059 CD ....      CALL      L:LCD_DisplayByte
    478          }
   \   00005C CC ....      JP        L:?epilogue_l2
    479          

   \                                 In section .near_func.text, align 1, keep-with-next
    480          void LCD_LightIconSignal(uint8_t level,uint8_t status)
    481          {
   \                     LCD_LightIconSignal:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    482            if(status)
   \   000005 3D ..        TNZ       S:?b0
   \   000007 26 03        JRNE      ??lb_0
   \   000009 CC ....      JP        L:??LCD_LightIconSignal_0
    483            {
    484              LCD_DisplayByte(0,ICONs_PAGE_ADDRESS,0xff);
   \                     ??lb_0:
   \   00000C 35 FF ....   MOV       S:?b1, #0xff
   \   000010 35 08 ....   MOV       S:?b0, #0x8
   \   000014 4F           CLR       A
   \   000015 CD ....      CALL      L:LCD_DisplayByte
    485              switch(level)
   \   000018 B6 ..        LD        A, S:?b8
   \   00001A 4A           DEC       A
   \   00001B 27 12        JREQ      L:??LCD_LightIconSignal_1
   \   00001D 4A           DEC       A
   \   00001E 27 1F        JREQ      L:??LCD_LightIconSignal_2
   \   000020 4A           DEC       A
   \   000021 27 39        JREQ      L:??LCD_LightIconSignal_3
   \   000023 4A           DEC       A
   \   000024 27 60        JREQ      L:??LCD_LightIconSignal_4
   \   000026 4A           DEC       A
   \   000027 26 03        JRNE      ??lb_1
   \   000029 CC ....      JP        L:??LCD_LightIconSignal_5
   \                     ??lb_1:
   \   00002C CC ....      JP        L:??LCD_LightIconSignal_6
    486              {
    487                case 0:
    488                        break;
    489                case 1:
    490                        LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconSignal_1:
   \   00002F 35 FF ....   MOV       S:?b1, #0xff
   \   000033 35 08 ....   MOV       S:?b0, #0x8
   \   000037 A6 0A        LD        A, #0xa
   \   000039 CD ....      CALL      L:LCD_DisplayByte
    491                        break;
   \   00003C CC ....      JP        L:??LCD_LightIconSignal_6
    492                case 2:
    493                        LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconSignal_2:
   \   00003F 35 FF ....   MOV       S:?b1, #0xff
   \   000043 35 08 ....   MOV       S:?b0, #0x8
   \   000047 A6 0A        LD        A, #0xa
   \   000049 CD ....      CALL      L:LCD_DisplayByte
    494                        LCD_DisplayByte(12,ICONs_PAGE_ADDRESS,0xff);
   \   00004C 35 FF ....   MOV       S:?b1, #0xff
   \   000050 35 08 ....   MOV       S:?b0, #0x8
   \   000054 A6 0C        LD        A, #0xc
   \   000056 CD ....      CALL      L:LCD_DisplayByte
    495                        break;
   \   000059 CC ....      JP        L:??LCD_LightIconSignal_6
    496                case 3:
    497                        LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconSignal_3:
   \   00005C 35 FF ....   MOV       S:?b1, #0xff
   \   000060 35 08 ....   MOV       S:?b0, #0x8
   \   000064 A6 0A        LD        A, #0xa
   \   000066 CD ....      CALL      L:LCD_DisplayByte
    498                        LCD_DisplayByte(12,ICONs_PAGE_ADDRESS,0xff);
   \   000069 35 FF ....   MOV       S:?b1, #0xff
   \   00006D 35 08 ....   MOV       S:?b0, #0x8
   \   000071 A6 0C        LD        A, #0xc
   \   000073 CD ....      CALL      L:LCD_DisplayByte
    499                        LCD_DisplayByte(16,ICONs_PAGE_ADDRESS,0xff);
   \   000076 35 FF ....   MOV       S:?b1, #0xff
   \   00007A 35 08 ....   MOV       S:?b0, #0x8
   \   00007E A6 10        LD        A, #0x10
   \   000080 CD ....      CALL      L:LCD_DisplayByte
    500                        break;
   \   000083 CC ....      JP        L:??LCD_LightIconSignal_6
    501                case 4:
    502                        LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconSignal_4:
   \   000086 35 FF ....   MOV       S:?b1, #0xff
   \   00008A 35 08 ....   MOV       S:?b0, #0x8
   \   00008E A6 0A        LD        A, #0xa
   \   000090 CD ....      CALL      L:LCD_DisplayByte
    503                        LCD_DisplayByte(12,ICONs_PAGE_ADDRESS,0xff);
   \   000093 35 FF ....   MOV       S:?b1, #0xff
   \   000097 35 08 ....   MOV       S:?b0, #0x8
   \   00009B A6 0C        LD        A, #0xc
   \   00009D CD ....      CALL      L:LCD_DisplayByte
    504                        LCD_DisplayByte(16,ICONs_PAGE_ADDRESS,0xff);
   \   0000A0 35 FF ....   MOV       S:?b1, #0xff
   \   0000A4 35 08 ....   MOV       S:?b0, #0x8
   \   0000A8 A6 10        LD        A, #0x10
   \   0000AA CD ....      CALL      L:LCD_DisplayByte
    505                        LCD_DisplayByte(18,ICONs_PAGE_ADDRESS,0xff);
   \   0000AD 35 FF ....   MOV       S:?b1, #0xff
   \   0000B1 35 08 ....   MOV       S:?b0, #0x8
   \   0000B5 A6 12        LD        A, #0x12
   \   0000B7 CD ....      CALL      L:LCD_DisplayByte
    506                        break;
   \   0000BA CC ....      JP        L:??LCD_LightIconSignal_6
    507                case 5:
    508                        LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconSignal_5:
   \   0000BD 35 FF ....   MOV       S:?b1, #0xff
   \   0000C1 35 08 ....   MOV       S:?b0, #0x8
   \   0000C5 A6 0A        LD        A, #0xa
   \   0000C7 CD ....      CALL      L:LCD_DisplayByte
    509                        LCD_DisplayByte(12,ICONs_PAGE_ADDRESS,0xff);
   \   0000CA 35 FF ....   MOV       S:?b1, #0xff
   \   0000CE 35 08 ....   MOV       S:?b0, #0x8
   \   0000D2 A6 0C        LD        A, #0xc
   \   0000D4 CD ....      CALL      L:LCD_DisplayByte
    510                        LCD_DisplayByte(16,ICONs_PAGE_ADDRESS,0xff);
   \   0000D7 35 FF ....   MOV       S:?b1, #0xff
   \   0000DB 35 08 ....   MOV       S:?b0, #0x8
   \   0000DF A6 10        LD        A, #0x10
   \   0000E1 CD ....      CALL      L:LCD_DisplayByte
    511                        LCD_DisplayByte(18,ICONs_PAGE_ADDRESS,0xff);
   \   0000E4 35 FF ....   MOV       S:?b1, #0xff
   \   0000E8 35 08 ....   MOV       S:?b0, #0x8
   \   0000EC A6 12        LD        A, #0x12
   \   0000EE CD ....      CALL      L:LCD_DisplayByte
    512                        LCD_DisplayByte(20,ICONs_PAGE_ADDRESS,0xff);
   \   0000F1 35 FF ....   MOV       S:?b1, #0xff
   \   0000F5 35 08 ....   MOV       S:?b0, #0x8
   \   0000F9 A6 14        LD        A, #0x14
   \   0000FB CD ....      CALL      L:LCD_DisplayByte
    513                        break;
   \   0000FE 20 41        JRA       L:??LCD_LightIconSignal_6
    514                default:
    515                        break;
    516              }
    517            }
    518            else
    519            {
    520              LCD_DisplayByte(0,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconSignal_0:
   \   000100 3F ..        CLR       S:?b1
   \   000102 35 08 ....   MOV       S:?b0, #0x8
   \   000106 4F           CLR       A
   \   000107 CD ....      CALL      L:LCD_DisplayByte
    521              LCD_DisplayByte(10,ICONs_PAGE_ADDRESS,0);
   \   00010A 3F ..        CLR       S:?b1
   \   00010C 35 08 ....   MOV       S:?b0, #0x8
   \   000110 A6 0A        LD        A, #0xa
   \   000112 CD ....      CALL      L:LCD_DisplayByte
    522              LCD_DisplayByte(12,ICONs_PAGE_ADDRESS,0);
   \   000115 3F ..        CLR       S:?b1
   \   000117 35 08 ....   MOV       S:?b0, #0x8
   \   00011B A6 0C        LD        A, #0xc
   \   00011D CD ....      CALL      L:LCD_DisplayByte
    523              LCD_DisplayByte(16,ICONs_PAGE_ADDRESS,0);
   \   000120 3F ..        CLR       S:?b1
   \   000122 35 08 ....   MOV       S:?b0, #0x8
   \   000126 A6 10        LD        A, #0x10
   \   000128 CD ....      CALL      L:LCD_DisplayByte
    524              LCD_DisplayByte(18,ICONs_PAGE_ADDRESS,0);
   \   00012B 3F ..        CLR       S:?b1
   \   00012D 35 08 ....   MOV       S:?b0, #0x8
   \   000131 A6 12        LD        A, #0x12
   \   000133 CD ....      CALL      L:LCD_DisplayByte
    525              LCD_DisplayByte(20,ICONs_PAGE_ADDRESS,0);
   \   000136 3F ..        CLR       S:?b1
   \   000138 35 08 ....   MOV       S:?b0, #0x8
   \   00013C A6 14        LD        A, #0x14
   \   00013E CD ....      CALL      L:LCD_DisplayByte
    526            }
    527          	
    528          }
   \                     ??LCD_LightIconSignal_6:
   \   000141 32 ....      POP       S:?b8
   \   000144 81           RET
    529          //---------116 empty battery
    530          //---------120,123,125,127 battery level

   \                                 In section .near_func.text, align 1, keep-with-next
    531          void LCD_LightIconBattery(uint8_t level,uint8_t status)
    532          {
   \                     LCD_LightIconBattery:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    533            if(status)
   \   000005 3D ..        TNZ       S:?b0
   \   000007 26 03        JRNE      ??lb_2
   \   000009 CC ....      JP        L:??LCD_LightIconBattery_0
    534            {
    535              LCD_DisplayByte(116,ICONs_PAGE_ADDRESS,0xff);
   \                     ??lb_2:
   \   00000C 35 FF ....   MOV       S:?b1, #0xff
   \   000010 35 08 ....   MOV       S:?b0, #0x8
   \   000014 A6 74        LD        A, #0x74
   \   000016 CD ....      CALL      L:LCD_DisplayByte
    536              switch(level)
   \   000019 B6 ..        LD        A, S:?b8
   \   00001B 4A           DEC       A
   \   00001C 27 0C        JREQ      L:??LCD_LightIconBattery_1
   \   00001E 4A           DEC       A
   \   00001F 27 19        JREQ      L:??LCD_LightIconBattery_2
   \   000021 4A           DEC       A
   \   000022 27 33        JREQ      L:??LCD_LightIconBattery_3
   \   000024 4A           DEC       A
   \   000025 27 59        JREQ      L:??LCD_LightIconBattery_4
   \   000027 CC ....      JP        L:??LCD_LightIconBattery_5
    537              {
    538                      case 0:
    539                              break;
    540                      case 1:
    541                              LCD_DisplayByte(125,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconBattery_1:
   \   00002A 35 FF ....   MOV       S:?b1, #0xff
   \   00002E 35 08 ....   MOV       S:?b0, #0x8
   \   000032 A6 7D        LD        A, #0x7d
   \   000034 CD ....      CALL      L:LCD_DisplayByte
    542                             
    543                              break;
   \   000037 CC ....      JP        L:??LCD_LightIconBattery_5
    544                      case 2:
    545                              LCD_DisplayByte(125,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconBattery_2:
   \   00003A 35 FF ....   MOV       S:?b1, #0xff
   \   00003E 35 08 ....   MOV       S:?b0, #0x8
   \   000042 A6 7D        LD        A, #0x7d
   \   000044 CD ....      CALL      L:LCD_DisplayByte
    546                              LCD_DisplayByte(127,ICONs_PAGE_ADDRESS,0xff);
   \   000047 35 FF ....   MOV       S:?b1, #0xff
   \   00004B 35 08 ....   MOV       S:?b0, #0x8
   \   00004F A6 7F        LD        A, #0x7f
   \   000051 CD ....      CALL      L:LCD_DisplayByte
    547                           
    548                              break;
   \   000054 CC ....      JP        L:??LCD_LightIconBattery_5
    549                      case 3:
    550                              LCD_DisplayByte(125,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconBattery_3:
   \   000057 35 FF ....   MOV       S:?b1, #0xff
   \   00005B 35 08 ....   MOV       S:?b0, #0x8
   \   00005F A6 7D        LD        A, #0x7d
   \   000061 CD ....      CALL      L:LCD_DisplayByte
    551                              LCD_DisplayByte(127,ICONs_PAGE_ADDRESS,0xff);
   \   000064 35 FF ....   MOV       S:?b1, #0xff
   \   000068 35 08 ....   MOV       S:?b0, #0x8
   \   00006C A6 7F        LD        A, #0x7f
   \   00006E CD ....      CALL      L:LCD_DisplayByte
    552                              LCD_DisplayByte(123,ICONs_PAGE_ADDRESS,0xff);
   \   000071 35 FF ....   MOV       S:?b1, #0xff
   \   000075 35 08 ....   MOV       S:?b0, #0x8
   \   000079 A6 7B        LD        A, #0x7b
   \   00007B CD ....      CALL      L:LCD_DisplayByte
    553                           
    554                              break;
   \   00007E 20 6D        JRA       L:??LCD_LightIconBattery_5
    555                      case 4:
    556                              LCD_DisplayByte(125,ICONs_PAGE_ADDRESS,0xff);
   \                     ??LCD_LightIconBattery_4:
   \   000080 35 FF ....   MOV       S:?b1, #0xff
   \   000084 35 08 ....   MOV       S:?b0, #0x8
   \   000088 A6 7D        LD        A, #0x7d
   \   00008A CD ....      CALL      L:LCD_DisplayByte
    557                              LCD_DisplayByte(127,ICONs_PAGE_ADDRESS,0xff);
   \   00008D 35 FF ....   MOV       S:?b1, #0xff
   \   000091 35 08 ....   MOV       S:?b0, #0x8
   \   000095 A6 7F        LD        A, #0x7f
   \   000097 CD ....      CALL      L:LCD_DisplayByte
    558                              LCD_DisplayByte(123,ICONs_PAGE_ADDRESS,0xff);
   \   00009A 35 FF ....   MOV       S:?b1, #0xff
   \   00009E 35 08 ....   MOV       S:?b0, #0x8
   \   0000A2 A6 7B        LD        A, #0x7b
   \   0000A4 CD ....      CALL      L:LCD_DisplayByte
    559                              LCD_DisplayByte(120,ICONs_PAGE_ADDRESS,0xff);
   \   0000A7 35 FF ....   MOV       S:?b1, #0xff
   \   0000AB 35 08 ....   MOV       S:?b0, #0x8
   \   0000AF A6 78        LD        A, #0x78
   \   0000B1 CD ....      CALL      L:LCD_DisplayByte
    560                              break;
   \   0000B4 20 37        JRA       L:??LCD_LightIconBattery_5
    561                      default:
    562                              break;
    563              }
    564            }
    565            else
    566            {
    567              LCD_DisplayByte(116,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconBattery_0:
   \   0000B6 3F ..        CLR       S:?b1
   \   0000B8 35 08 ....   MOV       S:?b0, #0x8
   \   0000BC A6 74        LD        A, #0x74
   \   0000BE CD ....      CALL      L:LCD_DisplayByte
    568              LCD_DisplayByte(125,ICONs_PAGE_ADDRESS,0);
   \   0000C1 3F ..        CLR       S:?b1
   \   0000C3 35 08 ....   MOV       S:?b0, #0x8
   \   0000C7 A6 7D        LD        A, #0x7d
   \   0000C9 CD ....      CALL      L:LCD_DisplayByte
    569              LCD_DisplayByte(127,ICONs_PAGE_ADDRESS,0);
   \   0000CC 3F ..        CLR       S:?b1
   \   0000CE 35 08 ....   MOV       S:?b0, #0x8
   \   0000D2 A6 7F        LD        A, #0x7f
   \   0000D4 CD ....      CALL      L:LCD_DisplayByte
    570              LCD_DisplayByte(123,ICONs_PAGE_ADDRESS,0);
   \   0000D7 3F ..        CLR       S:?b1
   \   0000D9 35 08 ....   MOV       S:?b0, #0x8
   \   0000DD A6 7B        LD        A, #0x7b
   \   0000DF CD ....      CALL      L:LCD_DisplayByte
    571              LCD_DisplayByte(120,ICONs_PAGE_ADDRESS,0);
   \   0000E2 3F ..        CLR       S:?b1
   \   0000E4 35 08 ....   MOV       S:?b0, #0x8
   \   0000E8 A6 78        LD        A, #0x78
   \   0000EA CD ....      CALL      L:LCD_DisplayByte
    572            }
    573          	
    574          }
   \                     ??LCD_LightIconBattery_5:
   \   0000ED 32 ....      POP       S:?b8
   \   0000F0 81           RET
    575          
    576          //---------74 Bell
    577          //---------89 silent dash

   \                                 In section .near_func.text, align 1, keep-with-next
    578          void LCD_LightIconRing(uint8_t level,uint8_t status)
    579          {
   \                     LCD_LightIconRing:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    580          	if(status)
   \   000005 3D ..        TNZ       S:?b0
   \   000007 27 20        JREQ      L:??LCD_LightIconRing_0
    581          	{
    582                    LCD_DisplayByte(74,ICONs_PAGE_ADDRESS,0xff);
   \   000009 35 FF ....   MOV       S:?b1, #0xff
   \   00000D 35 08 ....   MOV       S:?b0, #0x8
   \   000011 A6 4A        LD        A, #0x4a
   \   000013 CD ....      CALL      L:LCD_DisplayByte
    583                    if(level == 0)//silent mode
   \   000016 3D ..        TNZ       S:?b8
   \   000018 26 25        JRNE      L:??LCD_LightIconRing_1
    584                    {
    585                            LCD_DisplayByte(79,ICONs_PAGE_ADDRESS,0xff);
   \   00001A 35 FF ....   MOV       S:?b1, #0xff
   \   00001E 35 08 ....   MOV       S:?b0, #0x8
   \   000022 A6 4F        LD        A, #0x4f
   \   000024 CD ....      CALL      L:LCD_DisplayByte
   \   000027 20 16        JRA       L:??LCD_LightIconRing_1
    586                    }
    587          	}
    588                  else
    589                  {
    590                    LCD_DisplayByte(74,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconRing_0:
   \   000029 3F ..        CLR       S:?b1
   \   00002B 35 08 ....   MOV       S:?b0, #0x8
   \   00002F A6 4A        LD        A, #0x4a
   \   000031 CD ....      CALL      L:LCD_DisplayByte
    591                    LCD_DisplayByte(79,ICONs_PAGE_ADDRESS,0);
   \   000034 3F ..        CLR       S:?b1
   \   000036 35 08 ....   MOV       S:?b0, #0x8
   \   00003A A6 4F        LD        A, #0x4f
   \   00003C CD ....      CALL      L:LCD_DisplayByte
    592                  }
    593          	
    594          }
   \                     ??LCD_LightIconRing_1:
   \   00003F 32 ....      POP       S:?b8
   \   000042 81           RET
    595          

   \                                 In section .near_func.text, align 1, keep-with-next
    596          void LCD_LightIconLock(uint8_t status)
    597          {
    598          	if(status)
   \                     LCD_LightIconLock:
   \   000000 4D           TNZ       A
   \   000001 27 0D        JREQ      L:??LCD_LightIconLock_0
    599          	{
    600          		LCD_DisplayByte(46,ICONs_PAGE_ADDRESS,0xff);
   \   000003 35 FF ....   MOV       S:?b1, #0xff
   \   000007 35 08 ....   MOV       S:?b0, #0x8
   \   00000B A6 2E        LD        A, #0x2e
   \   00000D CC ....      JP        L:LCD_DisplayByte
    601          	}
    602                  else
    603                  {
    604                    LCD_DisplayByte(46,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconLock_0:
   \   000010 3F ..        CLR       S:?b1
   \   000012 35 08 ....   MOV       S:?b0, #0x8
   \   000016 A6 2E        LD        A, #0x2e
   \   000018 CC ....      JP        L:LCD_DisplayByte
    605                  }
    606          }
    607          

   \                                 In section .near_func.text, align 1, keep-with-next
    608          void LCD_LightIconMail(uint8_t status)
    609          {
    610          	if(status)
   \                     LCD_LightIconMail:
   \   000000 4D           TNZ       A
   \   000001 27 0D        JREQ      L:??LCD_LightIconMail_0
    611          	{
    612          		LCD_DisplayByte(59,ICONs_PAGE_ADDRESS,0xff);
   \   000003 35 FF ....   MOV       S:?b1, #0xff
   \   000007 35 08 ....   MOV       S:?b0, #0x8
   \   00000B A6 3B        LD        A, #0x3b
   \   00000D CC ....      JP        L:LCD_DisplayByte
    613          	}
    614                  else
    615                  {
    616                    LCD_DisplayByte(59,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconMail_0:
   \   000010 3F ..        CLR       S:?b1
   \   000012 35 08 ....   MOV       S:?b0, #0x8
   \   000016 A6 3B        LD        A, #0x3b
   \   000018 CC ....      JP        L:LCD_DisplayByte
    617                  }
    618          }
    619          

   \                                 In section .near_func.text, align 1, keep-with-next
    620          void LCD_LightIconAlarm(uint8_t status)
    621          {
    622          	if(status)
   \                     LCD_LightIconAlarm:
   \   000000 4D           TNZ       A
   \   000001 27 0D        JREQ      L:??LCD_LightIconAlarm_0
    623          	{
    624          		LCD_DisplayByte(87,ICONs_PAGE_ADDRESS,0xff);
   \   000003 35 FF ....   MOV       S:?b1, #0xff
   \   000007 35 08 ....   MOV       S:?b0, #0x8
   \   00000B A6 57        LD        A, #0x57
   \   00000D CC ....      JP        L:LCD_DisplayByte
    625          	}
    626                  else
    627                  {
    628                    LCD_DisplayByte(87,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconAlarm_0:
   \   000010 3F ..        CLR       S:?b1
   \   000012 35 08 ....   MOV       S:?b0, #0x8
   \   000016 A6 57        LD        A, #0x57
   \   000018 CC ....      JP        L:LCD_DisplayByte
    629                  }
    630          }
    631          

   \                                 In section .near_func.text, align 1, keep-with-next
    632          void LCD_LightIconVibrate(uint8_t status)
    633          {
    634          	if(status)
   \                     LCD_LightIconVibrate:
   \   000000 4D           TNZ       A
   \   000001 27 0D        JREQ      L:??LCD_LightIconVibrate_0
    635          	{
    636          		LCD_DisplayByte(102,ICONs_PAGE_ADDRESS,0xff);
   \   000003 35 FF ....   MOV       S:?b1, #0xff
   \   000007 35 08 ....   MOV       S:?b0, #0x8
   \   00000B A6 66        LD        A, #0x66
   \   00000D CC ....      JP        L:LCD_DisplayByte
    637          	}
    638                  else
    639                  {
    640                    LCD_DisplayByte(102,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconVibrate_0:
   \   000010 3F ..        CLR       S:?b1
   \   000012 35 08 ....   MOV       S:?b0, #0x8
   \   000016 A6 66        LD        A, #0x66
   \   000018 CC ....      JP        L:LCD_DisplayByte
    641                  }
    642          }
    643          
    644          

   \                                 In section .near_func.text, align 1
    645          void LCD_LightIconPhone(uint8_t status)
    646          {
    647          	if(status)
   \                     LCD_LightIconPhone:
   \   000000 4D           TNZ       A
   \   000001 27 0D        JREQ      L:??LCD_LightIconPhone_0
    648          	{
    649          		LCD_DisplayByte(33,ICONs_PAGE_ADDRESS,0xff);
   \   000003 35 FF ....   MOV       S:?b1, #0xff
   \   000007 35 08 ....   MOV       S:?b0, #0x8
   \   00000B A6 21        LD        A, #0x21
   \   00000D CC ....      JP        L:LCD_DisplayByte
    650          	}
    651                  else
    652                  {
    653                    LCD_DisplayByte(33,ICONs_PAGE_ADDRESS,0);
   \                     ??LCD_LightIconPhone_0:
   \   000010 3F ..        CLR       S:?b1
   \   000012 35 08 ....   MOV       S:?b0, #0x8
   \   000016 A6 21        LD        A, #0x21
   \   000018 CC ....      JP        L:LCD_DisplayByte
    654                  }
    655          }

   \                                 In section .near.rodata, align 1
   \                     ?_0:
   \   000000 00 00 00 00  DC8 0, 0, 0, 0, 0
   \          00          

   \                                 In section .near.rodata, align 1
   \                     ?_1:
   \   000000 00 00 00 00  DC8 0, 0, 0, 0, 0
   \          00          
    656          
    657          
    658          //------------------------------------------------------------------------------------------------
    659          //---------0,10,12,16,18,20 signal
    660          //---------33 phone
    661          //---------46 key
    662          //---------59 mail
    663          //---------74 Bell
    664          //---------79 silent dash
    665          //---------87 ring
    666          //---------102 vibrat
    667          //---------116 empty battery
    668          //---------120,123,125,127 battery level
    669          
    670          //void LCD_RAM_LightIconSignal(u8 level,u8 status)
    671          //{
    672          //	LCD_RAM[0][8] = 0;
    673          //	LCD_RAM[10][8] = 0;
    674          //	LCD_RAM[12][8] = 0;
    675          //	LCD_RAM[16][8] = 0;
    676          //	LCD_RAM[18][8] = 0;
    677          //	LCD_RAM[20][8] = 0;
    678          //	if(status)
    679          //	{
    680          //		LCD_RAM[0][8] = 0xff;
    681          //		switch(level)
    682          //		{
    683          //			case 0:
    684          //				break;
    685          //			case 1:
    686          //				LCD_RAM[10][8] = 0xff;
    687          //				break;
    688          //			case 2:
    689          //				LCD_RAM[10][8] = 0xff;
    690          //				LCD_RAM[12][8] = 0xff;
    691          //				break;
    692          //			case 3:
    693          //				LCD_RAM[10][8] = 0xff;
    694          //				LCD_RAM[12][8] = 0xff;
    695          //				LCD_RAM[16][8] = 0xff;
    696          //				break;
    697          //			case 4:
    698          //				LCD_RAM[10][8] = 0xff;
    699          //				LCD_RAM[12][8] = 0xff;
    700          //				LCD_RAM[16][8] = 0xff;
    701          //				LCD_RAM[18][8] = 0xff;
    702          //				break;
    703          //			case 5:
    704          //				LCD_RAM[10][8] = 0xff;
    705          //				LCD_RAM[12][8] = 0xff;
    706          //				LCD_RAM[16][8] = 0xff;
    707          //				LCD_RAM[18][8] = 0xff;
    708          //				LCD_RAM[20][8] = 0xff;
    709          //				break;
    710          //			default:
    711          //				break;
    712          //		}
    713          //	}
    714          //	
    715          //}
    716          ////---------116 empty battery
    717          ////---------120,123,125,127 battery level
    718          //void LCD_RAM_LightIconBattery(u8 level,u8 status)
    719          //{
    720          //	LCD_RAM[116][8] = 0;
    721          //	LCD_RAM[120][8] = 0;
    722          //	LCD_RAM[123][8] = 0;
    723          //	LCD_RAM[127][8] = 0;
    724          //	LCD_RAM[125][8] = 0;
    725          //	if(status)
    726          //	{
    727          //		LCD_RAM[116][8] = 0xff;
    728          //		switch(level)
    729          //		{
    730          //			case 0:
    731          //				break;
    732          //			case 1:
    733          //				LCD_RAM[125][8] = 0xff;
    734          //				break;
    735          //			case 2:
    736          //				LCD_RAM[125][8] = 0xff;
    737          //				LCD_RAM[127][8] = 0xff;
    738          //				break;
    739          //			case 3:
    740          //				LCD_RAM[125][8] = 0xff;
    741          //				LCD_RAM[127][8] = 0xff;
    742          //				LCD_RAM[123][8] = 0xff;
    743          //				break;
    744          //			case 4:
    745          //				LCD_RAM[125][8] = 0xff;
    746          //				LCD_RAM[127][8] = 0xff;
    747          //				LCD_RAM[123][8] = 0xff;
    748          //				LCD_RAM[120][8] = 0xff;
    749          //				break;
    750          //			default:
    751          //				break;
    752          //		}
    753          //	}
    754          //	
    755          //}
    756          //
    757          ////---------74 Bell
    758          ////---------89 silent dash
    759          //void LCD_RAM_LightIconRing(u8 level,u8 status)
    760          //{
    761          //	LCD_RAM[34][8] = 0;
    762          //	LCD_RAM[79][8] = 0;
    763          //	if(status)
    764          //	{
    765          //		LCD_RAM[74][8] = 0xff;
    766          //		if(level == 0)//silent mode
    767          //		{
    768          //			LCD_RAM[79][8] = 0xff;
    769          //		}
    770          //	}
    771          //	
    772          //}
    773          //
    774          //void LCD_RAM_LightIconLock(u8 status)
    775          //{
    776          //	LCD_RAM[46][8] = 0;
    777          //	if(status)
    778          //	{
    779          //		LCD_RAM[46][8] = 0xff;
    780          //	}
    781          //}
    782          //
    783          //void LCD_RAM_LightIconMail(u8 status)
    784          //{
    785          //	LCD_RAM[59][8] = 0;
    786          //	if(status)
    787          //	{
    788          //		LCD_RAM[59][8] = 0xff;
    789          //	}
    790          //}
    791          //
    792          //void LCD_RAM_LightIconAlarm(u8 status)
    793          //{
    794          //	LCD_RAM[87][8] = 0;
    795          //	if(status)
    796          //	{
    797          //		LCD_RAM[87][8] = 0xff;
    798          //	}
    799          //}
    800          //
    801          //void LCD_RAM_LightIconVibrate(u8 status)
    802          //{
    803          //	LCD_RAM[102][8] = 0;
    804          //	if(status)
    805          //	{
    806          //		LCD_RAM[102][8] = 0xff;
    807          //	}
    808          //}
    809          //
    810          //
    811          //void LCD_RAM_LightIconPhone(u8 status)
    812          //{
    813          //	LCD_RAM[33][8] = 0;
    814          //	if(status)
    815          //	{
    816          //		LCD_RAM[33][8] = 0xff;
    817          //	}
    818          //}
    819          
    820          //void LCD_RAM_Refresh(void)
    821          //{
    822          //	unsigned char page,column;
    823          //	
    824          //	for(page = 0;page<9;page++)
    825          //	{
    826          //		LCD_WritePageAdr(page);
    827          //		LCD_WriteColumnAdr(0);
    828          //		for(column = 0;column<128;column++)
    829          //		{
    830          //			LCD_Write_RAM(LCD_RAM[column][page]);
    831          //		}
    832          //	}
    833          //	
    834          //}
    835          //
    836          //void LCD_RAM_WriteDot(uint8_t x, uint8_t y, uint8_t dot)
    837          //{
    838          //	if(x>128)
    839          //	{
    840          //		x = 0;
    841          //	}
    842          //	if(y>72)
    843          //	{
    844          //		y = 0;
    845          //	}
    846          //	if(dot)
    847          //	{
    848          //		LCD_RAM[x][y/8] |= 0x01<<y%8;
    849          //	}
    850          //	else
    851          //	{
    852          //		LCD_RAM[x][y/8] &= 0xfe<<y%8;
    853          //	}
    854          //}
    855          //
    856          ////------------X1 need < X2----------------------------------------
    857          //void LCD_RAM_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2)
    858          //{
    859          //	float deltax,deltay = 0;
    860          //	float slope;
    861          //	deltax = x2-x1;
    862          //	deltay = y2-y1;
    863          //	slope = deltay/deltax;
    864          //	deltay = y1;
    865          //	if(deltax < 0)
    866          //	{
    867          //		deltax = -deltax;
    868          //	}
    869          //	while(deltax--)
    870          //	{
    871          //		LCD_RAM_WriteDot(x1, (char)(deltay + slope*x1),1);
    872          //		x1++;
    873          //	}
    874          //}
    875          //
    876          ////------------X1 need < X2----------------------------------------
    877          //void LCD_RAM_DrawCircle(uint8_t x1, uint8_t y1, uint8_t rad)
    878          //{
    879          //	float deltax,deltay = 0;
    880          //	float slope;
    881          //	deltax = rad+rad;
    882          //	deltay = deltax;
    883          //	while(deltax--)
    884          //	{
    885          ////		LCD_RAM_WriteDot(x1-rad,,1);
    886          //		x1++;
    887          //	}
    888          //}
    889          
    890          //void LCD_RAM_Put6x8Char(uint8_t x, uint8_t y, char asc)
    891          //{
    892          //	uint8_t cnt = 0;
    893          //	for(cnt = 0; cnt<6; cnt++)
    894          //	{
    895          //			if(y%8)	//-----will affect two different pages---------------------
    896          //			{
    897          //				LCD_RAM[x+cnt][y/8] &= ~(0xff << y%8);
    898          //				LCD_RAM[x+cnt][y/8] |= LCD_6x8ASCTable[asc - 32][cnt] << y%8;
    899          //				LCD_RAM[x+cnt][y/8+1] &= ~(0xff >>(8-y%8));
    900          //				LCD_RAM[x+cnt][y/8+1] |= LCD_6x8ASCTable[asc - 32][cnt] >> (8-y%8);
    901          //			}
    902          //			else
    903          //			{
    904          //				LCD_RAM[x+cnt-8][y/8] = LCD_6x8ASCTable[asc - 32][cnt];
    905          //			}
    906          //	}
    907          //	
    908          //}
    909          
    910          //void LCD_RAM_Put6x8Str(uint8_t x, uint8_t y, char *ptr)
    911          //{
    912          //	uint8_t length = strlen(ptr);
    913          //	while(length--)
    914          //	{
    915          //		LCD_RAM_Put6x8Char(x,y,*ptr);
    916          //		x+=6;
    917          //		ptr++;
    918          //	}
    919          //	
    920          //}
    921          //
    922          //void LCD_RAM_Put8x16Char(uint8_t x, uint8_t y, char asc)
    923          //{
    924          //	uint8_t cnt = 0;
    925          //	for(cnt = 0; cnt<16; cnt++)
    926          //	{
    927          //		if(cnt<8)	//------high lines
    928          //		{
    929          //			if(y%8)	//-----will affect two different pages---------------------
    930          //			{
    931          //				LCD_RAM[x+cnt][y/8+1] &= ~(0xff << y%8);
    932          //				LCD_RAM[x+cnt][y/8+1] |= LCD_8x16ASCTable[asc - 32][cnt] << y%8;
    933          //				LCD_RAM[x+cnt][y/8+2] &= ~(0xff >> (8-y%8));
    934          //				LCD_RAM[x+cnt][y/8+2] |= LCD_8x16ASCTable[asc - 32][cnt] >> (8-y%8);
    935          //			}
    936          //			else
    937          //			{
    938          //				LCD_RAM[x+cnt][y/8+1] = LCD_8x16ASCTable[asc - 32][cnt];
    939          //			}
    940          //		}
    941          //		else
    942          //		{
    943          //			if(y%8)	//-----will affect two different pages---------------------
    944          //			{
    945          //				LCD_RAM[x+cnt-8][y/8] &= ~(0xff << y%8);
    946          //				LCD_RAM[x+cnt-8][y/8] |= LCD_8x16ASCTable[asc - 32][cnt] << y%8;
    947          //				LCD_RAM[x+cnt-8][y/8+1] &= ~(0xff >>(8-y%8));
    948          //				LCD_RAM[x+cnt-8][y/8+1] |= LCD_8x16ASCTable[asc - 32][cnt] >> (8-y%8);
    949          //			}
    950          //			else
    951          //			{
    952          //				LCD_RAM[x+cnt-8][y/8] = LCD_8x16ASCTable[asc - 32][cnt];
    953          //			}
    954          //			
    955          //		}
    956          //	}
    957          //	
    958          //}
    959          
    960          //void LCD_RAM_Put8x16Str(uint8_t x, uint8_t y, char *ptr)
    961          //{
    962          //	uint8_t length = strlen(ptr);
    963          //	while(length--)
    964          //	{
    965          //		LCD_RAM_Put8x16Char(x,y,*ptr);
    966          //		x+=8;
    967          //		ptr++;
    968          //	}
    969          //	
    970          //}
    971          
    972          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       5  ?_0
       5  ?_1
     199  LCD19264_Init
     570  LCD_6x8ASCTable
    1520  LCD_8x16ASCTable
      56  LCD_ClearScreen
      25  LCD_DisplayByte
       7  LCD_DisplayStartAdr
      95  LCD_Draw8BitBar
      27  LCD_LightIconAlarm
     241  LCD_LightIconBattery
      27  LCD_LightIconLock
      27  LCD_LightIconMail
      27  LCD_LightIconPhone
      67  LCD_LightIconRing
     325  LCD_LightIconSignal
      27  LCD_LightIconVibrate
      71  LCD_Put6x8Char
     150  LCD_Put6x8IntNumber
      62  LCD_Put6x8Str
      88  LCD_Put8x16Char
     148  LCD_Put8x16IntNumber
      62  LCD_Put8x16Str
      21  LCD_SetIndicator
      21  LCD_SetVolumn
      24  LCD_WriteColumnAdr
       7  LCD_WritePageAdr
      92  LCD_Write_RAM
      92  LCD_Write_REG

 
 2 100 bytes in section .near.rodata
 1 988 bytes in section .near_func.text
 
 1 988 bytes of CODE  memory
 2 100 bytes of CONST memory

Errors: none
Warnings: 3
